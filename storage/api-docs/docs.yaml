
openapi: 3.0.0
info:
  title: LMs
  version: 1.0.0
servers:
  - url: http://{baseUrl}
    description: Customizable base URL
    variables:
      baseUrl:
        default: api.example.com
        description: The base URL of the API
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    noauthAuth:
      type: http
      scheme: noauth
tags:
  - name: Auth
  - name: User
  - name: Courses
  - name: Courses > Students
  - name: Courses > Students > Comments
  - name: Courses > Students > Videos
  - name: Courses > Students > Quizes (tests)
  - name: Courses > Students > Course
  - name: Courses > Teachers
  - name: Courses > Teachers > Course
  - name: Courses > Teachers > Videos
  - name: Courses > Admin
  - name: Learning paths
  - name: Learning paths > Students
  - name: Learning paths > Teacher
  - name: Friends
  - name: Reviews
  - name: Project
  - name: Admin
  - name: Admin > Contest Requests
  - name: Admin > Project Requests
  - name: Admin > Statistics
  - name: Contest
  - name: Contest > programming contests
  - name: Contest > Quiz Contests
  - name: Teacher
  - name: Teacher > Course Tests (quizes)
  - name: Teacher > Contests
  - name: New Folder
paths:
  /api/login:
    post:
      tags:
        - Auth
      summary: Login
      description: >-
        ## Login API


        This endpoint allows users to log in to the application by providing
        their credentials. Upon successful authentication, the server will
        return a response containing user information and an authentication
        token.


        ### Request


        - **Method**: POST

        - **Endpoint**: `{{BaseUrl}}/api/login`


        #### Request Body


        The request must be sent as form-data and should include the following
        parameters:


        - **email** (string, required):

            - The email address of the user attempting to log in.

        - **password** (string, required):

            - The user's password. It must contain letters, numbers, symbols, and capital letters. The maximum length is 75 characters.


        ### Response


        The server responds with a status code of 200 upon a successful login.


        #### Response Structure


        The expected response format is as follows:


        ``` json

        {
          "status": true,
          "user_id": 0,
          "token": "",
          "role": ""
        }

         ```

        - status (boolean): Indicates whether the login was successful.

        - **user_id** (integer): The unique identifier for the user.

        - **token** (string): The authentication token for the session.

        - **role** (string): The role assigned to the user within the
        application (student,teacher,admin)
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: email of user to login
                  example: student@student.com
                password:
                  type: string
                  description: |-
                    must contain letters numbers symbols and capital letters
                    max length is 75
                  example: 1234/*-+Asa
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                user_id: 42
                token: >-
                  eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNzQ5NTYzMDU5LCJleHAiOjE3NTIxNTUwNTksIm5iZiI6MTc0OTU2MzA1OSwianRpIjoiOXBXNmliN3pxd0syY0JYSCIsInN1YiI6IjQyIiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.JqHI18c1aPgDnz1XiDpaFbfD6_-w9-cQkqP7UwlJlN0
                role: student
        '422':
          description: Unprocessable Content
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: no account Login
                  value:
                    errors:
                      email:
                        - there no account with this email
                example-1:
                  summary: wrong request
                  value:
                    errors:
                      password:
                        - The password field must be at least 8 characters.
                        - >-
                          The password field must contain at least one uppercase
                          and one lowercase letter.
                        - The password field must contain at least one symbol.
                        - The password field must contain at least one number.
                      email:
                        - The email field is required.
  /api/register:
    post:
      tags:
        - Auth
      summary: Register
      description: >-
        ### User Registration API


        The **User Registration** endpoint allows new users to create an account
        by providing their personal information and credentials.


        #### Request


        **HTTP Method:** POST

        **Endpoint:** `{{BaseUrl}}/api/register`


        **Request Body (form-data):**


        | Parameter | Type | Description |

        | --- | --- | --- |

        | `name` | text | The name of the user. |

        | `email` | text | The email of the new user. This must not already
        exist in the system. |

        | `password` | text | The password must contain letters, numbers,
        symbols, and capital letters. The maximum length is 75 characters. |

        | `password_confirmation` | text | Confirmation of the password entered.
        |

        | `image` | file | The profile image of the user. This can be null if no
        image is provided. |

        | `fcm_token` | text | The FCM token for the user. This can be null if
        not applicable. |

        | `gitHub_account` | text | The GitHub account of the user. This must be
        a valid account. |

        | `bio` | text | A brief bio of the user. |


        #### Response


        On successful registration, the API responds with a JSON object that
        indicates the status of the request:


        ``` json

        {
          "status": true,
          "message": ""
        }

         ```

        - **status**: A boolean indicating whether the registration was
        successful.

        - **message**: A string providing additional information about the
        registration status (empty if no additional message).


        This endpoint is essential for user account creation and requires
        careful validation of the input parameters to ensure data integrity and
        security.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: name of the user
                  example: Sarhan
                email:
                  type: string
                  description: email of the new user (must not be already exist)
                  example: abdsarhan511@gmail.com
                password:
                  type: string
                  description: |-
                    must contain letters numbers symbols and capital letters
                    max length is 75
                  example: 1234/*-+Asa
                password_confirmation:
                  type: string
                  description: the confirmation of the password
                  example: 1234/*-+Asa
                image:
                  type: string
                  description: the profile image (can be null)
                  format: binary
                fcm_token:
                  type: string
                  description: the fcm token for user ( can be null )
                gitHub_account:
                  type: string
                  description: the github account for user (must be real account)
                  example: https://github.com/ABDALRZAQ345
                bio:
                  type: string
                  description: 'the bio of user '
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: verification code sent successfully
        '422':
          description: Unprocessable Content
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  password:
                    - The password field confirmation does not match.
                    - The password field must be at least 8 characters.
                    - >-
                      The password field must contain at least one uppercase and
                      one lowercase letter.
                    - The password field must contain at least one letter.
                  email:
                    - there is already an account with this email address.
                  gitHub_account:
                    - >-
                      gitHub_account must be a valid GitHub account like
                      https://github.com/ABDALRZAQ345
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Too Many Attempts try again later .
  /api/verificationCode/check:
    post:
      tags:
        - Auth
      summary: Check Verification code
      description: >-
        ## Endpoint: Check Verification Code


        This endpoint is used to verify a code sent to a user's email address.
        It can be utilized for various purposes, such as confirming a
        registration or validating a password reset request.


        ### Request


        **Method:** POST

        **URL:** `{{BaseUrl}}/api/verificationCode/check`


        #### Request Body (form-data)


        - **email** (string): The email address of the user for whom the
        verification code is being checked.

        - **code** : A 6-digit code that has been sent to the user for
        verification.

        - **registration** (string): A flag indicating the purpose of the code:

            - `1`: The code is for registration verification.

            - `0`: The code is for password reset verification.


        ### Response


        The response will return a JSON object with the following structure:


        - **message** (boolean): Indicates whether the verification was
        successful.

        - **user_id** (integer): The ID of the user associated with the
        verification.

        - **token** (string): A token that may be used for further
        authentication.

        - **role** (string): The role of the user (e.g., admin, user).


        ### Example Response


        ``` json

        {
          "message": true,
          "user_id": 0,
          "token": "",
          "role": ""
        }

         ```

        This response indicates the success of the verification process and
        provides additional user-related information if applicable.


        OR


        ``` json

        {
          "message": "verification code is true,
        }

         ```

        this if the registration is 0
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: srss@gmail.com
                code:
                  type: integer
                  description: code consist of 6 digits that has sent to user
                  example: '105100'
                registration:
                  type: integer
                  description: >-
                    1 if the check code is to check the code which sent for
                    registration otherwise 0 like forget password code
                  example: '1'
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Check Verification code
                  value:
                    message: true
                    user_id: 43
                    token: >-
                      eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL3ZlcmlmaWNhdGlvbkNvZGUvY2hlY2siLCJpYXQiOjE3NDk4MjM3NDIsImV4cCI6MTc1MjQxNTc0MiwibmJmIjoxNzQ5ODIzNzQyLCJqdGkiOiI5WklRT3VqTm9kV01PbjIzIiwic3ViIjoiNDMiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.OMSHeqUuGqNAfP0B-CogHnDTzN-f_S-nGkg48IU_V3g
                    role: student
                example-1:
                  summary: Check Verification code
                  value:
                    message: 'verification code is true '
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: incorrect code
        '422':
          description: Unprocessable Content
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Check Verification code
                  value:
                    errors:
                      email:
                        - There is no user with this email
                example-1:
                  summary: Check Verification code
                  value:
                    errors:
                      code:
                        - The code field must be 6 digits.
                      email:
                        - This user is already verified.
                example-2:
                  summary: Check Verification code
                  value:
                    errors:
                      email:
                        - This email is not registered or not verified.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Too Many Attempts try again later .
  /api/verificationCode/send:
    post:
      tags:
        - Auth
      summary: Send Verification code
      description: >-
        ### Request Description


        This API endpoint is used to send a verification code to the specified
        email address. It can be utilized for either user registration or
        password recovery.


        ### Request Body Format


        The request body must be sent as form-data and should include the
        following parameters:


        - **email** (string, required): The email address to which the
        verification code will be sent.

        - **registration** (string, required):

            - Set to `1` if the requested code is for registration.

            - Set to `0` if the requested code is for password recovery (e.g., forgot password).


        ### Response Format


        The response will be in JSON format and will contain the following
        fields:


        - **status** (boolean): Indicates whether the request was successful.

        - **message** (string): A message related to the request status .


        ### Example Response


        ``` json

        {
          "status": true,
          "message": ""
        }

         ```
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: '{{user_email}}'
                registration:
                  type: string
                  description: >-
                    1 if the requested code is for registration otherwise 0 like
                    forget password code
                  example: '{{registration_status}}'
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: Verification code send successfully to sse@gmail.com
        '422':
          description: Unprocessable Content
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Send Verification code
                  value:
                    errors:
                      email:
                        - This user is already verified.
                example-1:
                  summary: Send Verification code
                  value:
                    errors:
                      email:
                        - This email is not registered or not verified.
                example-2:
                  summary: Send Verification code
                  value:
                    errors:
                      registration:
                        - The selected registration is invalid.
                      email:
                        - This email is not registered or not verified.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Too Many Attempts try again later .
  /api/password/forget:
    post:
      tags:
        - Auth
      summary: Forget Password
      description: >-
        ### Forget Password API


        This endpoint allows users to reset their password by verifying their
        email and a code sent to them


        #### Request Method


        - **POST**


        #### Request Parameters


        The request body should be sent as form-data and must include the
        following parameters:


        - **email** (string): The email address associated with the user
        account.

        - **code** : A 6-digit code sent to the user's email for verification.

        - **password** : the new password must contain letters numbers symbols
        and capital letters max length is 75 EndFragment

        - **password_confirmation** : A confirmation of the new password to
        ensure it matches the original one.


        #### Expected Response Format


        The response will be in JSON format and will include the following
        fields:


        - status (boolean): Indicates whether the password reset was successful.


        if status is true :


        - **user_id** (integer): The ID of the user whose password was reset.

        - **token** (string): A token associated with the user session.

        - **role** (string): The role of the user (teacher,student,admin).
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: '{{user_email}}'
                code:
                  type: integer
                  description: '6 digits sended code '
                  example: '228954'
                password:
                  type: string
                  description: >-
                    the new password must contain letters numbers symbols and
                    capital letters

                    max length is 75
                  example: 1234/*-+Asas
                password_confirmation:
                  type: string
                  description: the new password confirmation
                  example: 1234/*-+Asas
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: true
                user_id: 42
                token: >-
                  eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL3Bhc3N3b3JkL2ZvcmdldCIsImlhdCI6MTc0OTgyNTQyMywiZXhwIjoxNzUyNDE3NDIzLCJuYmYiOjE3NDk4MjU0MjMsImp0aSI6ImJ4V1l0V2UzM0Z1N0gxUGciLCJzdWIiOiI0MiIsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.CDTWH_rx8-e4Bmh-uqtwNIz0c983aTv69Fv-tdY959o
                role: student
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: incorrect code
        '422':
          description: Unprocessable Content
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  email:
                    - there is no user with this email
                  code:
                    - The code field must be 6 digits.
  /api/logout:
    post:
      tags:
        - Auth
      summary: Log out
      description: >-
        ## Logout API


        This endpoint is used to log out a user from the application. Upon
        successful logout, the user's session will be terminated.


        ### Request


        - **Method:** `POST`

        - **Endpoint:** `{{BaseUrl}}/api/logout`

        - Auth (required,Bearer) : token


        ### Request Body


        The request body is sent as form-data. Currently, no parameters are
        required in the request body.


        ### Response


        The response will indicate the result of the logout operation.


        #### Example Response


        ``` json

        {
          "status": true,
          "message": ""
        }

         ```

        - **status**: A boolean indicating the success of the logout operation.

        - **message**: A string that may contain additional information about
        the logout process (can be empty).


        ### Notes


        - Ensure that the user is authenticated before making this request.

        - A successful response confirms that the user has been logged out.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: Logged out successfully
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
  /api/token/refresh:
    post:
      tags:
        - Auth
      summary: Refresh token
      description: >-
        ## Refresh Token Endpoint


        This endpoint is used to refresh the user's authentication token. It
        allows clients to obtain a new token without requiring the user to log
        in again.


        ### Request


        - **Method**: POST

        - **URL**: `{{BaseUrl}}/api/token/refresh`

        - **Request Body : empty**

        - Auth (required,Bearer) : token


        ### Response


        The response will return a JSON object with the following fields:


        - **message**: A boolean indicating the success of the token refresh
        operation.

        - **user_id**: An integer representing the ID of the user associated
        with the token.

        - **token**: A string containing the new authentication token.

        - **role**: A string indicating the role of the user.


        ### Example Response


        ``` json

        {
          "message": true,
          "user_id": 0,
          "token": "",
          "role": ""
        }

         ```

        ### Notes


        - Ensure that the request is made with valid credentials to obtain a
        successful response.

        - The `token` field will contain the new token that should be used for
        subsequent authenticated requests.

        - If the request fails, the response may contain an error message that
        can help diagnose the issue.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: true
                user_id: 42
                token: >-
                  eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL3Rva2VuL3JlZnJlc2giLCJpYXQiOjE3NDk1NjU4NzEsImV4cCI6MTc1MjQxODI4NywibmJmIjoxNzQ5ODI2Mjg3LCJqdGkiOiJ6TE83eFY5WnhMMXZDdjZBIiwic3ViIjoiNDIiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.x-ft-bV4CSNBS17lo_SbTZHOWXMgNuZcc8IpGRo7ufU
                role: student
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Token has expired and can no longer be refreshed
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Too Many Attempts try again later .
  /api/send_fcm:
    post:
      tags:
        - Auth
      summary: Update Fcm token
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fcm_token:
                  type: string
                  description: new fcm token
                  example: dd
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: token Updated successfully
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Too Many Attempts try again later .
  /api/auth/google:
    post:
      tags:
        - Auth
      summary: Auth With Google
      description: >-
        ## Google Authentication API


        This endpoint allows users to authenticate using their Google account by
        providing an ID token. The ID token is a string that contains
        information about the user and is obtained after a successful sign-in
        with Google.


        ### Request


        - **Method**: POST

        - **URL**: `{{BaseUrl}}/api/auth/google`


        #### Request Body (form-data)


        | Parameter | Type | Description |

        | --- | --- | --- |

        | `id_token` | text | The ID token received from Google after user
        authentication. This token is essential for verifying the user's
        identity. |


        ### Response


        Upon successful authentication, the API will return a response
        containing user information and authentication status. The exact
        structure of the response will depend on the implementation but
        typically includes user details such as:


        - User ID

        - Email

        - Name

        - Authentication token


        ### Notes


        - Ensure that the ID token is valid and has not expired before making
        the request.

        - This endpoint is specifically designed for Google authentication and
        should not be used with tokens from other providers.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                id_token:
                  type: string
                  example: dd
      security:
        - noauthAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                user_id: 42
                token: >-
                  eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNzQ5NTYzMDU5LCJleHAiOjE3NTIxNTUwNTksIm5iZiI6MTc0OTU2MzA1OSwianRpIjoiOXBXNmliN3pxd0syY0JYSCIsInN1YiI6IjQyIiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.JqHI18c1aPgDnz1XiDpaFbfD6_-w9-cQkqP7UwlJlN0
                role: student
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: Invalid Google ID token
  /api/auth/github/redirect:
    get:
      tags:
        - Auth
      summary: Auth with Github
      description: >-
        ## GitHub Redirect Authentication


        This endpoint is used to initiate the authentication process for users
        via GitHub. It allows users to be redirected to GitHub for
        authentication and subsequently receive an authorization code.


        ### Request Method


        - **GET**


        ### Endpoint


        - `{{BaseUrl}}/api/auth/github/redirect`
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/me/update:
    post:
      tags:
        - User
      summary: Update Profile
      description: >-
        ## Update User Profile


        ### Endpoint


        `POST {{BaseUrl}}/api/me/update`


        ### Overview


        This endpoint allows users to update their profile information. The
        request requires a form-data payload containing various fields related
        to the user's profile.


        ### Request Body


        - **name** (string): The name of the user.

        - **bio** (string): A short biography of the user.

        - **gitHub_account** (s):tring The user's GitHub account username (must
        be real account).

        - **image** (file): An optional profile image file.

        - **age** (text): The age of the user.


        ### Response


        On a successful request, the API will return a JSON object containing
        the user's updated information. In case of validation errors, a response
        with a status code of `422` will be returned, along with an `errors`
        object detailing the issues with the provided parameters.


        #### Example Successful Response


        ``` json

        {
          "status": true,
          "user": {
            "id": 0,
            "name": "",
            "email": "",
            "image": null,
            "gitHub_account": "",
            "bio": "",
            "last_online": "",
            "role": "",
            "level": "",
            "joined": "",
            "age": ""
          }
        }

         ```

        #### Example Error Response


        ``` json

        {
          "errors": {
            "name": [""],
            "gitHub_account": [""]
          }
        }

         ```
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: d
                bio:
                  type: string
                gitHub_account:
                  type: string
                  example: https://github.com/ABDALRZAQ3
                image:
                  type: string
                  format: binary
                age:
                  type: integer
                  example: '12'
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                user:
                  id: 1
                  name: ddd
                  email: admin@admin.com
                  image: null
                  gitHub_account: https://github.com/ABDALRZAQ345
                  bio: ''
                  last_online: online
                  role: admin
                  level: beginner
                  joined: '2025-06-19'
                  age: '12'
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
        '422':
          description: Unprocessable Content
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  name:
                    - The name field is required.
                  gitHub_account:
                    - >-
                      gitHub_account must be a valid GitHub account like
                      https://github.com/ABDALRZAQ345
  /api/password/reset:
    post:
      tags:
        - User
      summary: Reset Password
      description: >-
        ## Password Reset API


        This endpoint allows users to reset their password by providing their
        current password along with a new password and its confirmation.


        ### Request


        **Method:** POST

        **Endpoint:** `{{BaseUrl}}/api/password/reset`


        **Auth** (required,Bearer) : token


        #### Request Body Parameters (form-data)


        - **old_password** (string, required): The user's current password. This
        is necessary to authenticate the request and ensure that the user has
        permission to change their password.

        - **new_password** (string, required): The new password that the user
        wishes to set.

            - **Requirements:**

                - Must contain letters, numbers, symbols, and capital letters.

                - Maximum length is 75 characters.

        - **new_password_confirmation** (string, required): A confirmation of
        the new password. This must match the `new_password` to ensure that the
        user has entered it correctly.


        ### Response


        The API will return a JSON response indicating the status of the
        password reset request.


        #### Success Response


        - **Status Code:** 200 OK

        - **Content-Type:** application/json

        - { "status": true, "message": ""}
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  example: 1234/*-+Asa
                new_password:
                  type: string
                  description: |-
                    must contain letters numbers symbols and capital letters
                    max length is 75
                  example: 1234/*-+Asass
                new_password_confirmation:
                  type: string
                  example: 1234/*-+Asass
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: Password reset successfully!
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Reset Password
                  value:
                    status: false
                    message: Wrong old password!
                example-1:
                  summary: Reset Password
                  value:
                    message: Unauthenticated.
        '422':
          description: Unprocessable Content
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  new_password:
                    - The new password field must be at least 8 characters.
                    - >-
                      The new password field must contain at least one uppercase
                      and one lowercase letter.
                    - The new password field must contain at least one symbol.
                    - The new password field must contain at least one number.
                    - The new password field confirmation does not match.
  /api/users/40:
    get:
      tags:
        - User
      summary: User Profile
      description: >-
        ## Get User Details


        This endpoint retrieves the details of a specific user identified by
        their unique user ID.


        ### Request


        - **Method:** GET

        - **Endpoint:** `{{BaseUrl}}/api/users/{id}`

        - **Path Parameter:**

            - `id` (required): The unique identifier of the user you want to retrieve.


        ### Response


        The response will return a JSON object with the following structure:


        - **Status Code:** 200 (if successful) or 403 (if access is forbidden).

        - **Content-Type:** application/json

        - **Response Body:**

            - `status`: A boolean indicating the success of the request.

            - `message`: A string providing additional information (may be empty).

            - `user`: An object containing user details (only present if the request is successful):

                - `id`: The user's unique identifier.

                - `name`: The user's name.

                - `email`: The user's email address.

                - `image`: The URL of the user's profile image.

                - `gitHub_account`: The user's GitHub account link.

                - `bio`: A brief biography of the user.

                - `last_online`: Timestamp of the last time the user was online.

                - `role`: The user's role in the system.

                - `level`: The user's current level.

                - `joined`: The date the user joined the platform.

                - `age`: The user's age (can be null).

                - `points`: The number of points the user has accumulated.

                - `completed_courses`: The number of courses the user has completed.

                - `completed_learning_paths`: The number of learning paths the user has completed.

                - `is_friend`: Indicates if the requester is a friend of the user (0 for no, 1 for yes).


        ### Example Response


        ``` json

        {
          "status": true,
          "user": {
            "id": 0,
            "name": "",
            "email": "",
            "image": "",
            "gitHub_account": "",
            "bio": "",
            "last_online": "",
            "role": "",
            "level": "",
            "joined": "",
            "age": null,
            "points": 0,
            "completed_courses": 0,
            "completed_learning_paths": 0,
            "is_friend": 0
          }
        }

         ```

        ### Notes


        - A 403 status code is when someone trying to access admin 's
        information

        - if the user is teacher some data is dfiffernt
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                user:
                  id: 19
                  name: Erin Paucek
                  email: david.jaskolski@example.org
                  image: https://via.placeholder.com/640x480.png/004411?text=minima
                  gitHub_account: http://www.hickle.org/
                  bio: >-
                    Id voluptas aut exercitationem eius quod. Nobis et error
                    delectus delectus quae occaecati temporibus.
                  last_online: 53 years ago
                  role: student
                  level: beginner
                  joined: '2025-06-19'
                  age: null
                  points: 284327
                  completed_courses: 1
                  completed_learning_paths: 0
                  is_friend: 0
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Forbidden
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object not found.
  /api/users/4/achievements:
    get:
      tags:
        - User
      summary: User achivements
      description: >-
        ## Get User Achievements


        This endpoint retrieves the achievements associated with a specific user
        identified by their user ID. The request is made to the URL
        `{{BaseUrl}}/api/users/{userId}/achievements`, where `{userId}` should
        be replaced with the actual ID of the user whose achievements you want
        to fetch.


        ### Request Parameters


        - **Method**: GET

        - **URL**: `{{BaseUrl}}/api/users/{userId}/achievements`

        - **Path Parameter**:

            - `userId` (required): The unique identifier of the user whose achievements are being requested.


        ### Response Structure


        Upon a successful request, the API will return a JSON response
        containing the following structure:


        - **status** (boolean): Indicates the success of the request.

        - **achievements** (array): A list of achievement objects associated
        with the user. Each achievement object contains:

            - **id** (integer): The unique identifier of the achievement.

            - **name** (string): The name of the achievement.

            - **image** (string or null): A URL or path to an image representing the achievement, if available.

            - **achieve_date** (string): The date when the achievement was earned.

        - **meta** (object): Contains pagination information:

            - **current_page** (integer): The current page number.

            - **last_page** (integer): The last page number available.

            - **per_page** (integer): The number of achievements per page.

            - **total** (integer): The total number of achievements available.


        ### Example Response


        A successful response might look like this:


        ``` json

        {
          "status": true,
          "achievements": [
            {
              "id": 0,
              "name": "",
              "image": null,
              "achieve_date": ""
            }
          ],
          "meta": {
            "current_page": 0,
            "last_page": 0,
            "per_page": 0,
            "total": 0
          }
        }

         ```

        ### Error Responses


        In case of an error, such as when the user ID does not exist or user is
        teacher , the API will return a `404` status code along with a JSON
        response indicating the failure:


        ``` json

        {
          "status": false,
          "message": ""
        }

         ```

        Note: you will get 404 if the user not exist or he is teacher
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                achievements:
                  - id: 1
                    name: First Course
                    image: null
                    achieve_date: '2025-06-19'
                  - id: 3
                    name: Looser Looser
                    image: https://img.icons8.com/color/96/sad.png
                    achieve_date: '2025-06-19'
                  - id: 9
                    name: Contest Rookie
                    image: >-
                      https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ1DNNFQ6hXWIlRRbw-PasghEnRmhOd25r93Q&s
                    achieve_date: '2025-06-19'
                  - id: 14
                    name: Oops Again
                    image: null
                    achieve_date: '2025-06-19'
                  - id: 15
                    name: Track Starter
                    image: null
                    achieve_date: '2025-06-19'
                  - id: 16
                    name: Quiz Champ
                    image: null
                    achieve_date: '2025-06-19'
                  - id: 18
                    name: Late Bloomer
                    image: null
                    achieve_date: '2025-06-19'
                  - id: 26
                    name: Famous
                    image: null
                    achieve_date: '2025-06-19'
                meta:
                  current_page: 1
                  last_page: 1
                  per_page: 20
                  total: 8
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object Not found
  /api/users/5/projects:
    get:
      tags:
        - User
      summary: User projects
      description: >-
        ## Get User Projects


        This endpoint retrieves a list of projects associated with a specific
        user identified by their user ID. The user ID is included in the URL
        path.


        ### Request


        - **Method:** GET

        - **Endpoint:** `{{BaseUrl}}/api/users/{user_id}/projects`

        - **Path Parameter:**

            - `user_id` (integer): The ID of the user whose projects are being requested.


        ### Response


        The response will return a JSON object containing the following
        structure:


        - `status` (boolean): Indicates the success of the request.

        - `projects` (array): An array of project objects, each containing:

            - `id` (integer): The unique identifier for the project.

            - `title` (string): The title of the project.

            - `user_id` (integer): The ID of the user associated with the project.

            - `description` (string): A brief description of the project.

            - `technologies` (array|null): An array of technologies used in the project or null if not specified.

            - `links` : links related to the project or null if not specified.

            - `likes` (integer): The number of likes the project has received.

            - `status` (string): The current status of the project.

            - `tag_id` (integer): The ID of the tag associated with the project.

            - `created_at` (string): The timestamp of when the project was created.

            - `updated_at` (string): The timestamp of when the project was last updated.

            - `user_name` (string): The name of the user who created the project.

            - `tag_name` (string): The name of the tag associated with the project.

        - `meta` (object): An object containing pagination information:

            - `current_page` (integer): The current page number.

            - `last_page` (integer): The last page number available.

            - `per_page` (integer): The number of items per page.

            - `total` (integer): The total number of projects available.


        ### Notes


        - 404 response when you are trying to access not found user or teacher
        or admin.
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                projects:
                  - id: 11
                    title: Aut voluptatem pariatur non excepturi dolores qui.
                    user_id: 5
                    description: >-
                      Minima voluptatem atque ut ut. Molestiae labore inventore
                      unde quibusdam. Quibusdam qui sunt sunt. Quae quae
                      praesentium maiores architecto et sit.
                    technologies: null
                    links: null
                    likes: 0
                    status: refused
                    tag_id: 6
                    created_at: '2025-06-19T11:29:00.000000Z'
                    updated_at: '2025-06-19T11:29:00.000000Z'
                    user_name: Autumn Hoeger
                    tag_name: 'Artificial intelligent '
                meta:
                  current_page: 1
                  last_page: 1
                  per_page: 20
                  total: 1
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object Not found
  /api/users/5/contests:
    get:
      tags:
        - User
      summary: User contest
      description: >-
        ### Get User Contests


        This endpoint retrieves the contests participated by specific user
        identified by their unique ID. The request is made to the URL
        `{{BaseUrl}}/api/users/{userId}/contests`, where `{userId}` should be
        replaced with the actual ID of the user .


        #### Request Parameters


        - **userId** (path parameter): The unique identifier of the user whose
        contests are being retrieved must be student not teacher or admin .


        #### Response


        The response will be in JSON format and contains the following fields:


        - **status** (boolean): Indicates the success of the request.

        - **contests_count** (integer): The total number of contests
        participated by the user.

        - **total_points** (integer): The total points gained by the user across
        all contests.

        - **contests** (array): A list of contests, where each contest object
        contains:

            - **id** (integer): The unique identifier of the contest.

            - **name** (string): The name of the contest.

            - **date** date of contests

            - **rank** (integer): The user's rank in the contest.

            - **points** (integer): The points earned by the user in the contest.

            - **type** (string): The type of contest ( quiz or programming)

        - **meta** (object): Pagination information, containing:

            - **current_page** (integer): The current page number.

            - **last_page** (integer): The last page number.

            - **per_page** (integer): The number of items per page.

            - **total** (integer): The total number of contests available.


        #### Notes


        - The response will return an empty contests array if there are no
        contests associated with the user.

        - 404 when user not exists or user is not student
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                contests_count: 3
                total_points: 5
                contests:
                  - id: 2
                    name: Facilis est voluptatem est.
                    date: '2025-08-08 22:59:02'
                    rank: 3
                    points: 13
                    type: quiz
                  - id: 10
                    name: Voluptates excepturi voluptatem deleniti.
                    date: '2025-06-29 13:04:18'
                    rank: 46
                    points: 5
                    type: quiz
                  - id: 15
                    name: Ipsam illum sit.
                    date: '2025-06-19 08:16:00'
                    rank: 32
                    points: 51
                    type: programming
                meta:
                  current_page: 1
                  last_page: 1
                  per_page: 20
                  total: 3
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object Not found
  /api/users/5/streaks:
    get:
      tags:
        - User
      summary: User streak
      description: >-
        ### API Endpoint: Get User Streaks


        **HTTP Method:** GET

        **Endpoint:** `{{BaseUrl}}/api/users/{userId}/streaks`


        #### Purpose


        This endpoint retrieves the streaks associated with a specific user
        identified by their unique user ID. Streaks represent the user's
        activity over a curreny year.


        #### Request Parameters


        - **userId** (path parameter): The unique identifier of the user whose
        streaks are being requested.


        #### Response Structure


        Upon a successful request, the API returns a JSON object with the
        following structure:


        - **status** (boolean): Indicates the success of the request.

        - **streaks** (array of objects): Contains a list of streak objects,
        each with the following properties:

            - **date** (string): The date associated with the streak.

            - **status** (integer): Represents the status of the streak (e.g., active, inactive).

            - **dayOfWeek** (string): The day of the week corresponding to the streak date.


        #### Example Response


        ``` json

        {
          "status": true,
          "streaks": [
            {
              "date": "",
              "status": 0,
              "dayOfWeek": ""
            }
          ]
        }

         ```

        Note :


        404 is when user not found or user is not student
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                streaks:
                  - date: '2025-01-01'
                    status: 1
                    dayOfWeek: Wednesday
                  - date: '2025-01-02'
                    status: 3
                    dayOfWeek: Thursday
                  - date: '2025-01-03'
                    status: 2
                    dayOfWeek: Friday
                  - date: '2025-01-04'
                    status: 1
                    dayOfWeek: Saturday
                  - date: '2025-01-05'
                    status: 3
                    dayOfWeek: Sunday
                  - date: '2025-01-06'
                    status: 2
                    dayOfWeek: Monday
                  - date: '2025-01-07'
                    status: 2
                    dayOfWeek: Tuesday
                  - date: '2025-01-08'
                    status: 2
                    dayOfWeek: Wednesday
                  - date: '2025-01-09'
                    status: 0
                    dayOfWeek: Thursday
                  - date: '2025-01-10'
                    status: 0
                    dayOfWeek: Friday
                  - date: '2025-01-11'
                    status: 1
                    dayOfWeek: Saturday
                  - date: '2025-01-12'
                    status: 1
                    dayOfWeek: Sunday
                  - date: '2025-01-13'
                    status: 1
                    dayOfWeek: Monday
                  - date: '2025-01-14'
                    status: 0
                    dayOfWeek: Tuesday
                  - date: '2025-01-15'
                    status: 3
                    dayOfWeek: Wednesday
                  - date: '2025-01-16'
                    status: 0
                    dayOfWeek: Thursday
                  - date: '2025-01-17'
                    status: 0
                    dayOfWeek: Friday
                  - date: '2025-01-18'
                    status: 0
                    dayOfWeek: Saturday
                  - date: '2025-01-19'
                    status: 2
                    dayOfWeek: Sunday
                  - date: '2025-01-20'
                    status: 2
                    dayOfWeek: Monday
                  - date: '2025-01-21'
                    status: 3
                    dayOfWeek: Tuesday
                  - date: '2025-01-22'
                    status: 0
                    dayOfWeek: Wednesday
                  - date: '2025-01-23'
                    status: 0
                    dayOfWeek: Thursday
                  - date: '2025-01-24'
                    status: 0
                    dayOfWeek: Friday
                  - date: '2025-01-25'
                    status: 1
                    dayOfWeek: Saturday
                  - date: '2025-01-26'
                    status: 3
                    dayOfWeek: Sunday
                  - date: '2025-01-27'
                    status: 1
                    dayOfWeek: Monday
                  - date: '2025-01-28'
                    status: 3
                    dayOfWeek: Tuesday
                  - date: '2025-01-29'
                    status: 3
                    dayOfWeek: Wednesday
                  - date: '2025-01-30'
                    status: 3
                    dayOfWeek: Thursday
                  - date: '2025-01-31'
                    status: 0
                    dayOfWeek: Friday
                  - date: '2025-02-01'
                    status: 2
                    dayOfWeek: Saturday
                  - date: '2025-02-02'
                    status: 3
                    dayOfWeek: Sunday
                  - date: '2025-02-03'
                    status: 1
                    dayOfWeek: Monday
                  - date: '2025-02-04'
                    status: 0
                    dayOfWeek: Tuesday
                  - date: '2025-02-05'
                    status: 2
                    dayOfWeek: Wednesday
                  - date: '2025-02-06'
                    status: 1
                    dayOfWeek: Thursday
                  - date: '2025-02-07'
                    status: 2
                    dayOfWeek: Friday
                  - date: '2025-02-08'
                    status: 2
                    dayOfWeek: Saturday
                  - date: '2025-02-09'
                    status: 3
                    dayOfWeek: Sunday
                  - date: '2025-02-10'
                    status: 1
                    dayOfWeek: Monday
                  - date: '2025-02-11'
                    status: 0
                    dayOfWeek: Tuesday
                  - date: '2025-02-12'
                    status: 1
                    dayOfWeek: Wednesday
                  - date: '2025-02-13'
                    status: 2
                    dayOfWeek: Thursday
                  - date: '2025-02-14'
                    status: 3
                    dayOfWeek: Friday
                  - date: '2025-02-15'
                    status: 1
                    dayOfWeek: Saturday
                  - date: '2025-02-16'
                    status: 3
                    dayOfWeek: Sunday
                  - date: '2025-02-17'
                    status: 0
                    dayOfWeek: Monday
                  - date: '2025-02-18'
                    status: 1
                    dayOfWeek: Tuesday
                  - date: '2025-02-19'
                    status: 1
                    dayOfWeek: Wednesday
                  - date: '2025-02-20'
                    status: 3
                    dayOfWeek: Thursday
                  - date: '2025-02-21'
                    status: 1
                    dayOfWeek: Friday
                  - date: '2025-02-22'
                    status: 0
                    dayOfWeek: Saturday
                  - date: '2025-02-23'
                    status: 0
                    dayOfWeek: Sunday
                  - date: '2025-02-24'
                    status: 1
                    dayOfWeek: Monday
                  - date: '2025-02-25'
                    status: 0
                    dayOfWeek: Tuesday
                  - date: '2025-02-26'
                    status: 3
                    dayOfWeek: Wednesday
                  - date: '2025-02-27'
                    status: 0
                    dayOfWeek: Thursday
                  - date: '2025-02-28'
                    status: 3
                    dayOfWeek: Friday
                  - date: '2025-03-01'
                    status: 2
                    dayOfWeek: Saturday
                  - date: '2025-03-02'
                    status: 3
                    dayOfWeek: Sunday
                  - date: '2025-03-03'
                    status: 1
                    dayOfWeek: Monday
                  - date: '2025-03-04'
                    status: 1
                    dayOfWeek: Tuesday
                  - date: '2025-03-05'
                    status: 1
                    dayOfWeek: Wednesday
                  - date: '2025-03-06'
                    status: 3
                    dayOfWeek: Thursday
                  - date: '2025-03-07'
                    status: 2
                    dayOfWeek: Friday
                  - date: '2025-03-08'
                    status: 1
                    dayOfWeek: Saturday
                  - date: '2025-03-09'
                    status: 2
                    dayOfWeek: Sunday
                  - date: '2025-03-10'
                    status: 2
                    dayOfWeek: Monday
                  - date: '2025-03-11'
                    status: 3
                    dayOfWeek: Tuesday
                  - date: '2025-03-12'
                    status: 2
                    dayOfWeek: Wednesday
                  - date: '2025-03-13'
                    status: 3
                    dayOfWeek: Thursday
                  - date: '2025-03-14'
                    status: 1
                    dayOfWeek: Friday
                  - date: '2025-03-15'
                    status: 0
                    dayOfWeek: Saturday
                  - date: '2025-03-16'
                    status: 3
                    dayOfWeek: Sunday
                  - date: '2025-03-17'
                    status: 1
                    dayOfWeek: Monday
                  - date: '2025-03-18'
                    status: 0
                    dayOfWeek: Tuesday
                  - date: '2025-03-19'
                    status: 0
                    dayOfWeek: Wednesday
                  - date: '2025-03-20'
                    status: 1
                    dayOfWeek: Thursday
                  - date: '2025-03-21'
                    status: 2
                    dayOfWeek: Friday
                  - date: '2025-03-22'
                    status: 0
                    dayOfWeek: Saturday
                  - date: '2025-03-23'
                    status: 3
                    dayOfWeek: Sunday
                  - date: '2025-03-24'
                    status: 0
                    dayOfWeek: Monday
                  - date: '2025-03-25'
                    status: 1
                    dayOfWeek: Tuesday
                  - date: '2025-03-26'
                    status: 2
                    dayOfWeek: Wednesday
                  - date: '2025-03-27'
                    status: 2
                    dayOfWeek: Thursday
                  - date: '2025-03-28'
                    status: 3
                    dayOfWeek: Friday
                  - date: '2025-03-29'
                    status: 0
                    dayOfWeek: Saturday
                  - date: '2025-03-30'
                    status: 0
                    dayOfWeek: Sunday
                  - date: '2025-03-31'
                    status: 1
                    dayOfWeek: Monday
                  - date: '2025-04-01'
                    status: 2
                    dayOfWeek: Tuesday
                  - date: '2025-04-02'
                    status: 3
                    dayOfWeek: Wednesday
                  - date: '2025-04-03'
                    status: 2
                    dayOfWeek: Thursday
                  - date: '2025-04-04'
                    status: 3
                    dayOfWeek: Friday
                  - date: '2025-04-05'
                    status: 1
                    dayOfWeek: Saturday
                  - date: '2025-04-06'
                    status: 0
                    dayOfWeek: Sunday
                  - date: '2025-04-07'
                    status: 0
                    dayOfWeek: Monday
                  - date: '2025-04-08'
                    status: 2
                    dayOfWeek: Tuesday
                  - date: '2025-04-09'
                    status: 0
                    dayOfWeek: Wednesday
                  - date: '2025-04-10'
                    status: 1
                    dayOfWeek: Thursday
                  - date: '2025-04-11'
                    status: 2
                    dayOfWeek: Friday
                  - date: '2025-04-12'
                    status: 0
                    dayOfWeek: Saturday
                  - date: '2025-04-13'
                    status: 2
                    dayOfWeek: Sunday
                  - date: '2025-04-14'
                    status: 1
                    dayOfWeek: Monday
                  - date: '2025-04-15'
                    status: 0
                    dayOfWeek: Tuesday
                  - date: '2025-04-16'
                    status: 3
                    dayOfWeek: Wednesday
                  - date: '2025-04-17'
                    status: 2
                    dayOfWeek: Thursday
                  - date: '2025-04-18'
                    status: 0
                    dayOfWeek: Friday
                  - date: '2025-04-19'
                    status: 2
                    dayOfWeek: Saturday
                  - date: '2025-04-20'
                    status: 0
                    dayOfWeek: Sunday
                  - date: '2025-04-21'
                    status: 1
                    dayOfWeek: Monday
                  - date: '2025-04-22'
                    status: 2
                    dayOfWeek: Tuesday
                  - date: '2025-04-23'
                    status: 1
                    dayOfWeek: Wednesday
                  - date: '2025-04-24'
                    status: 1
                    dayOfWeek: Thursday
                  - date: '2025-04-25'
                    status: 3
                    dayOfWeek: Friday
                  - date: '2025-04-26'
                    status: 0
                    dayOfWeek: Saturday
                  - date: '2025-04-27'
                    status: 1
                    dayOfWeek: Sunday
                  - date: '2025-04-28'
                    status: 1
                    dayOfWeek: Monday
                  - date: '2025-04-29'
                    status: 1
                    dayOfWeek: Tuesday
                  - date: '2025-04-30'
                    status: 0
                    dayOfWeek: Wednesday
                  - date: '2025-05-01'
                    status: 3
                    dayOfWeek: Thursday
                  - date: '2025-05-02'
                    status: 3
                    dayOfWeek: Friday
                  - date: '2025-05-03'
                    status: 3
                    dayOfWeek: Saturday
                  - date: '2025-05-04'
                    status: 3
                    dayOfWeek: Sunday
                  - date: '2025-05-05'
                    status: 1
                    dayOfWeek: Monday
                  - date: '2025-05-06'
                    status: 0
                    dayOfWeek: Tuesday
                  - date: '2025-05-07'
                    status: 0
                    dayOfWeek: Wednesday
                  - date: '2025-05-08'
                    status: 0
                    dayOfWeek: Thursday
                  - date: '2025-05-09'
                    status: 2
                    dayOfWeek: Friday
                  - date: '2025-05-10'
                    status: 0
                    dayOfWeek: Saturday
                  - date: '2025-05-11'
                    status: 0
                    dayOfWeek: Sunday
                  - date: '2025-05-12'
                    status: 0
                    dayOfWeek: Monday
                  - date: '2025-05-13'
                    status: 2
                    dayOfWeek: Tuesday
                  - date: '2025-05-14'
                    status: 0
                    dayOfWeek: Wednesday
                  - date: '2025-05-15'
                    status: 3
                    dayOfWeek: Thursday
                  - date: '2025-05-16'
                    status: 0
                    dayOfWeek: Friday
                  - date: '2025-05-17'
                    status: 3
                    dayOfWeek: Saturday
                  - date: '2025-05-18'
                    status: 1
                    dayOfWeek: Sunday
                  - date: '2025-05-19'
                    status: 2
                    dayOfWeek: Monday
                  - date: '2025-05-20'
                    status: 3
                    dayOfWeek: Tuesday
                  - date: '2025-05-21'
                    status: 3
                    dayOfWeek: Wednesday
                  - date: '2025-05-22'
                    status: 2
                    dayOfWeek: Thursday
                  - date: '2025-05-23'
                    status: 3
                    dayOfWeek: Friday
                  - date: '2025-05-24'
                    status: 3
                    dayOfWeek: Saturday
                  - date: '2025-05-25'
                    status: 1
                    dayOfWeek: Sunday
                  - date: '2025-05-26'
                    status: 3
                    dayOfWeek: Monday
                  - date: '2025-05-27'
                    status: 3
                    dayOfWeek: Tuesday
                  - date: '2025-05-28'
                    status: 3
                    dayOfWeek: Wednesday
                  - date: '2025-05-29'
                    status: 2
                    dayOfWeek: Thursday
                  - date: '2025-05-30'
                    status: 1
                    dayOfWeek: Friday
                  - date: '2025-05-31'
                    status: 0
                    dayOfWeek: Saturday
                  - date: '2025-06-01'
                    status: 3
                    dayOfWeek: Sunday
                  - date: '2025-06-02'
                    status: 2
                    dayOfWeek: Monday
                  - date: '2025-06-03'
                    status: 1
                    dayOfWeek: Tuesday
                  - date: '2025-06-04'
                    status: 0
                    dayOfWeek: Wednesday
                  - date: '2025-06-05'
                    status: 1
                    dayOfWeek: Thursday
                  - date: '2025-06-06'
                    status: 1
                    dayOfWeek: Friday
                  - date: '2025-06-07'
                    status: 3
                    dayOfWeek: Saturday
                  - date: '2025-06-08'
                    status: 1
                    dayOfWeek: Sunday
                  - date: '2025-06-09'
                    status: 1
                    dayOfWeek: Monday
                  - date: '2025-06-10'
                    status: 2
                    dayOfWeek: Tuesday
                  - date: '2025-06-11'
                    status: 1
                    dayOfWeek: Wednesday
                  - date: '2025-06-12'
                    status: 0
                    dayOfWeek: Thursday
                  - date: '2025-06-13'
                    status: 0
                    dayOfWeek: Friday
                  - date: '2025-06-14'
                    status: 3
                    dayOfWeek: Saturday
                  - date: '2025-06-15'
                    status: 0
                    dayOfWeek: Sunday
                  - date: '2025-06-16'
                    status: 3
                    dayOfWeek: Monday
                  - date: '2025-06-17'
                    status: 1
                    dayOfWeek: Tuesday
                  - date: '2025-06-18'
                    status: 0
                    dayOfWeek: Wednesday
                  - date: '2025-06-19'
                    status: 0
                    dayOfWeek: Thursday
                  - date: '2025-06-20'
                    status: 0
                    dayOfWeek: Friday
                  - date: '2025-06-21'
                    status: 0
                    dayOfWeek: Saturday
                  - date: '2025-06-22'
                    status: 0
                    dayOfWeek: Sunday
                  - date: '2025-06-23'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-06-24'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-06-25'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-06-26'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-06-27'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-06-28'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-06-29'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-06-30'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-07-01'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-07-02'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-07-03'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-07-04'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-07-05'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-07-06'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-07-07'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-07-08'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-07-09'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-07-10'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-07-11'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-07-12'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-07-13'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-07-14'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-07-15'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-07-16'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-07-17'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-07-18'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-07-19'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-07-20'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-07-21'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-07-22'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-07-23'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-07-24'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-07-25'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-07-26'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-07-27'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-07-28'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-07-29'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-07-30'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-07-31'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-08-01'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-08-02'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-08-03'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-08-04'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-08-05'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-08-06'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-08-07'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-08-08'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-08-09'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-08-10'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-08-11'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-08-12'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-08-13'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-08-14'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-08-15'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-08-16'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-08-17'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-08-18'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-08-19'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-08-20'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-08-21'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-08-22'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-08-23'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-08-24'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-08-25'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-08-26'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-08-27'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-08-28'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-08-29'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-08-30'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-08-31'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-09-01'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-09-02'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-09-03'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-09-04'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-09-05'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-09-06'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-09-07'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-09-08'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-09-09'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-09-10'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-09-11'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-09-12'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-09-13'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-09-14'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-09-15'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-09-16'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-09-17'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-09-18'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-09-19'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-09-20'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-09-21'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-09-22'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-09-23'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-09-24'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-09-25'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-09-26'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-09-27'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-09-28'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-09-29'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-09-30'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-10-01'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-10-02'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-10-03'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-10-04'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-10-05'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-10-06'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-10-07'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-10-08'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-10-09'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-10-10'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-10-11'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-10-12'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-10-13'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-10-14'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-10-15'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-10-16'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-10-17'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-10-18'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-10-19'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-10-20'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-10-21'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-10-22'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-10-23'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-10-24'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-10-25'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-10-26'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-10-27'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-10-28'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-10-29'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-10-30'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-10-31'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-11-01'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-11-02'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-11-03'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-11-04'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-11-05'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-11-06'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-11-07'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-11-08'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-11-09'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-11-10'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-11-11'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-11-12'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-11-13'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-11-14'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-11-15'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-11-16'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-11-17'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-11-18'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-11-19'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-11-20'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-11-21'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-11-22'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-11-23'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-11-24'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-11-25'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-11-26'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-11-27'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-11-28'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-11-29'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-11-30'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-12-01'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-12-02'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-12-03'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-12-04'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-12-05'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-12-06'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-12-07'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-12-08'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-12-09'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-12-10'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-12-11'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-12-12'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-12-13'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-12-14'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-12-15'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-12-16'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-12-17'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-12-18'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-12-19'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-12-20'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-12-21'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-12-22'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-12-23'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-12-24'
                    status: null
                    dayOfWeek: Wednesday
                  - date: '2025-12-25'
                    status: null
                    dayOfWeek: Thursday
                  - date: '2025-12-26'
                    status: null
                    dayOfWeek: Friday
                  - date: '2025-12-27'
                    status: null
                    dayOfWeek: Saturday
                  - date: '2025-12-28'
                    status: null
                    dayOfWeek: Sunday
                  - date: '2025-12-29'
                    status: null
                    dayOfWeek: Monday
                  - date: '2025-12-30'
                    status: null
                    dayOfWeek: Tuesday
                  - date: '2025-12-31'
                    status: null
                    dayOfWeek: Wednesday
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object Not found
  /api/users/10/statistics:
    get:
      tags:
        - User
      summary: User statistics
      description: >-
        ### Endpoint: Get User Statistics


        This endpoint retrieves the statistics for a specific user identified by
        their unique ID. The request is made using an HTTP GET method and does
        not require any additional parameters in the request body.


        #### Request


        - **Method:** GET

        - **URL:** `{{BaseUrl}}/api/users/{userId}/statistics`

        - **Path Parameter:**

            - `userId` (integer): The unique identifier of the user for whom the statistics are being requested.


        #### Response


        Upon a successful request, the server responds with a status code of
        `200` and a JSON object containing the following fields:


        - `status` (boolean): Indicates the success of the request.

        - `completed_courses` (integer): The number of courses completed by the
        user.

        - `certificates` (integer): The number of certificates earned by the
        user.

        - `contests` (integer): The number of contests participated in by the
        user.

        - `points` (integer): The total points accumulated by the user.

        - `achievements` (integer): The number of achievements unlocked by the
        user.

        - `best_contest` (object): An object containing details about the user's
        best contest, with the following properties:

            - `id` (integer): Unique identifier of the contest.

            - `name` (string): Name of the contest.

            - `date` (string): Date when the contest occurred.

            - `rank` (integer): User's rank in the contest.

            - `points` (integer): Points earned in the contest.

            - `type` (string): Type of the contest.

        - `max_streak` (integer): The maximum streak of consecutive days the
        user has engaged with the platform.

        - `current_streak` (integer): The current streak of consecutive days the
        user has engaged with the platform.


        #### Notes


        - Ensure that the `userId` is valid and corresponds to an existing user
        to receive accurate statistics.

        - The response will contain default values (like `0` for counts and
        empty strings for text fields) if the user has not completed any
        activities.

        - 404 when no such student exist
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                completed_courses: 1
                certificates: 2
                contests: 3
                points: 5
                achievements: 2
                best_contest:
                  id: 10
                  name: Voluptates excepturi voluptatem deleniti.
                  date: '2025-06-29 13:04:18'
                  rank: 46
                  points: 5
                  type: quiz
                max_streak: 0
                current_streak: 0
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object Not found
  /api/users/4/created_courses:
    get:
      tags:
        - User
      summary: Teacher 's courses
      description: >-
        ## Endpoint Description


        This endpoint retrieves the courses created by a specific user
        identified by their user ID. The request is made to the URL
        `{{BaseUrl}}/api/users/{user_id}/created_courses`, where `{user_id}` is
        the ID of the user whose created courses are being fetched.


        ### Request Parameters


        - **user_id** (path parameter): The unique identifier of the user. In
        this example,.


        ### Response


        ``` json

        {
            "status": true,
            "courses": [
                {
                    "id": 8,
                    "title_of_course": "Voluptatem ut rerum et sapiente.",
                    "description_of_course": "Qui sed facere nobis ut ducimus quibusdam. Repellat sit nisi perferendis qui quae a. Assumenda id maiores molestiae. Repellat est iusto voluptas voluptate.",
                    "rate": 3,
                    "image_of_course": "https://via.placeholder.com/300x200.png/0022cc?text=education+sed",
                    "number_of_video": 6,
                    "number_of_test": 3,
                    "price": 113,
                    "teacher_id": 40,
                    "teacher_name": "ddd",
                    "teacher_image": null
                },
                {
                    "id": 41,
                    "title_of_course": "Possimus sed veritatis.",
                    "description_of_course": "In consequatur reprehenderit eum. Velit voluptas accusantium iste repellendus. Distinctio repellat magnam qui. Est quod voluptates ducimus dolor.",
                    "rate": 3,
                    "image_of_course": "https://via.placeholder.com/300x200.png/00ffaa?text=education+nisi",
                    "number_of_video": 6,
                    "number_of_test": 1,
                    "price": 47,
                    "teacher_id": 40,
                    "teacher_name": "ddd",
                    "teacher_image": null
                },
                {
                    "id": 48,
                    "title_of_course": "Et odio est.",
                    "description_of_course": "Eaque dolorem nihil unde omnis. Est saepe corrupti in atque ea est architecto. Delectus error vel ut laborum nobis tempora sapiente dolores.",
                    "rate": 3,
                    "image_of_course": "https://via.placeholder.com/300x200.png/001199?text=education+nobis",
                    "number_of_video": 6,
                    "number_of_test": 1,
                    "price": 185,
                    "teacher_id": 40,
                    "teacher_name": "ddd",
                    "teacher_image": null
                }
            ],
            "meta": {
                "current_page": 1,
                "last_page": 1,
                "per_page": 20,
                "total": 3
            }
        }

         ```
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                courses:
                  - id: 8
                    title_of_course: Voluptatem ut rerum et sapiente.
                    description_of_course: >-
                      Qui sed facere nobis ut ducimus quibusdam. Repellat sit
                      nisi perferendis qui quae a. Assumenda id maiores
                      molestiae. Repellat est iusto voluptas voluptate.
                    rate: 3
                    image_of_course: >-
                      https://via.placeholder.com/300x200.png/0022cc?text=education+sed
                    number_of_video: 6
                    number_of_test: 3
                    price: 113
                    teacher_id: 40
                    teacher_name: ddd
                    teacher_image: null
                  - id: 41
                    title_of_course: Possimus sed veritatis.
                    description_of_course: >-
                      In consequatur reprehenderit eum. Velit voluptas
                      accusantium iste repellendus. Distinctio repellat magnam
                      qui. Est quod voluptates ducimus dolor.
                    rate: 3
                    image_of_course: >-
                      https://via.placeholder.com/300x200.png/00ffaa?text=education+nisi
                    number_of_video: 6
                    number_of_test: 1
                    price: 47
                    teacher_id: 40
                    teacher_name: ddd
                    teacher_image: null
                  - id: 48
                    title_of_course: Et odio est.
                    description_of_course: >-
                      Eaque dolorem nihil unde omnis. Est saepe corrupti in
                      atque ea est architecto. Delectus error vel ut laborum
                      nobis tempora sapiente dolores.
                    rate: 3
                    image_of_course: >-
                      https://via.placeholder.com/300x200.png/001199?text=education+nobis
                    number_of_video: 6
                    number_of_test: 1
                    price: 185
                    teacher_id: 40
                    teacher_name: ddd
                    teacher_image: null
                meta:
                  current_page: 1
                  last_page: 1
                  per_page: 20
                  total: 3
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object Not found
  /api/users/40/created_courses:
    get:
      tags:
        - User
      summary: Teacher 's paths
      description: >-
        ### Get Created Courses for a User


        This endpoint retrieves the list of courses created by a specific user
        identified by their user ID. The request is made to the following URL:


        ```

        GET {{BaseUrl}}/api/users/{user_id}/created_courses

         ```

        #### Request Parameters


        - **user_id** (path parameter): The unique identifier of the user whose
        created courses are being requested. In this example, user id must be
        teacher or you will get 404 response


        #### Response


        The response will return a JSON object containing the following fields:


        - **status** (boolean): Indicates whether the request was successful.

        - **courses** (array): An array of course objects, each containing:

            - **id** (integer): The unique identifier of the course.

            - **title_of_course** (string): The title of the course.

            - **description_of_course** (string): A brief description of the course.

            - **rate** (integer): The rating of the course.

            - **image_of_course** (string): A URL to the course image.

            - **number_of_video** (integer): The number of videos in the course.

            - **number_of_test** (integer): The number of tests associated with the course.

            - **price** (integer): The price of the course.

            - **teacher_id** (integer): The unique identifier of the teacher.

            - **teacher_name** (string): The name of the teacher.

            - **teacher_image** (string|null): A URL to the teacher's image, or null if not available.

        - **meta** (object): Contains pagination information:

            - **current_page** (integer): The current page number.

            - **last_page** (integer): The total number of pages available.

            - **per_page** (integer): The number of items per page.

            - **total** (integer): The total number of courses available.


        ### Example Response


        ``` json

        {
          "status": true,
          "courses": [
            {
              "id": 0,
              "title_of_course": "",
              "description_of_course": "",
              "rate": 0,
              "image_of_course": "",
              "number_of_video": 0,
              "number_of_test": 0,
              "price": 0,
              "teacher_id": 0,
              "teacher_name": "",
              "teacher_image": null
            }
          ],
          "meta": {
            "current_page": 0,
            "last_page": 0,
            "per_page": 0,
            "total": 0
          }
        }

         ```

        404 when user not exist or user is not teacher
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                courses:
                  - id: 8
                    title_of_course: Voluptatem ut rerum et sapiente.
                    description_of_course: >-
                      Qui sed facere nobis ut ducimus quibusdam. Repellat sit
                      nisi perferendis qui quae a. Assumenda id maiores
                      molestiae. Repellat est iusto voluptas voluptate.
                    rate: 3
                    image_of_course: >-
                      https://via.placeholder.com/300x200.png/0022cc?text=education+sed
                    number_of_video: 6
                    number_of_test: 3
                    price: 113
                    teacher_id: 40
                    teacher_name: ddd
                    teacher_image: null
                  - id: 41
                    title_of_course: Possimus sed veritatis.
                    description_of_course: >-
                      In consequatur reprehenderit eum. Velit voluptas
                      accusantium iste repellendus. Distinctio repellat magnam
                      qui. Est quod voluptates ducimus dolor.
                    rate: 3
                    image_of_course: >-
                      https://via.placeholder.com/300x200.png/00ffaa?text=education+nisi
                    number_of_video: 6
                    number_of_test: 1
                    price: 47
                    teacher_id: 40
                    teacher_name: ddd
                    teacher_image: null
                  - id: 48
                    title_of_course: Et odio est.
                    description_of_course: >-
                      Eaque dolorem nihil unde omnis. Est saepe corrupti in
                      atque ea est architecto. Delectus error vel ut laborum
                      nobis tempora sapiente dolores.
                    rate: 3
                    image_of_course: >-
                      https://via.placeholder.com/300x200.png/001199?text=education+nobis
                    number_of_video: 6
                    number_of_test: 1
                    price: 185
                    teacher_id: 40
                    teacher_name: ddd
                    teacher_image: null
                meta:
                  current_page: 1
                  last_page: 1
                  per_page: 20
                  total: 3
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
              example: "{\r\n    \"status\": false,\r\n    \"message\": \"Object Not found\"\r\n}"
  /api/users/40/created_contest:
    get:
      tags:
        - User
      summary: Teacher 's contests
      description: >-
        ## Get Created Contests for a User


        This endpoint retrieves a list of contests created by a specific user
        identified by their user ID. I


        ### Request


        - **Method**: GET

        - **URL**: `{{BaseUrl}}/api/users/{user_id}/created_contest`

        - **Path Parameters**:

            - `user_id` (integer): The unique identifier of the user whose created contests are being retrieved. In this example, the user ID is `40`.

        - **Query Parameters**:

            - `page` (integer): The page number of the results to retrieve. The example shows a request for page `1`.


        #### Response Structure


        - `status` (boolean): Indicates the success of the request.

        - `contests` (array): A list of contests created by the user.

            - Each contest object contains:

                - `id` (integer): The unique identifier of the contest.

                - `name` (string): The name of the contest.

                - `time` (integer): The duration of the contest in minutes .

                - `description` (string): A brief description of the contest.

                - `type` (string): The type of contest (quiz , programming).

                - `level` (string): The difficulty level of the contest. ('beginner', 'intermediate', 'advanced', 'expert')

                - `status` (string): The current status of the contest.('active', 'ended', 'coming')

                - `start_at` (string): The start date and time of the contest.

                - `request_status` only admin and creator of contest can see that field its accepted if the contest accepted by admin or refused .
                    ('pending', 'accepted', 'rejected')
                    **Note :: not every one can see request status**

                - `students_count` (integer): The number of students participating in the contest.

                - `teacher_id` (integer): The ID of the teacher created the contest.

        - `meta` (object): Contains pagination information.

            - `current_page` (integer): The current page number of the results.

            - `last_page` (integer): The total number of pages available.

            - `per_page` (integer): The number of items per page.

            - `total` (integer): The total number of contests available.
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                contests:
                  - id: 9
                    name: Tempora maxime explicabo.
                    time: 163
                    description: >-
                      Quam et enim perferendis impedit id hic placeat. Ea est
                      nam recusandae ratione hic enim. Labore non ut
                      necessitatibus a consequatur fugiat ratione.
                    type: programming
                    level: beginner
                    status: ended
                    start_at: '2025-07-01 12:20:38'
                    request_status: accepted
                    students_count: 2
                    teacher_id: 40
                meta:
                  current_page: 1
                  last_page: 1
                  per_page: 20
                  total: 1
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object Not found
  /api/users:
    get:
      tags:
        - User
      summary: Users
      description: >-
        ## API Endpoint: Retrieve Users


        This endpoint retrieves a list of users based on specified query
        parameters. It allows filtering users by pagination, role, and search
        and it can sort the results based on specified fields.


        ### Request


        **Method:** GET

        **URL:** `{{BaseUrl}}/api/users`


        #### Query Parameters


        - `page` (integer): Specifies the page number for pagination. Default is
        1.

        - `friends` (boolean): Indicates whether to filter users by friendship
        status. A value of `0` retrieves all users
            1 retrive just friends .

        - `role` (string): Filters users by their role. For example, setting
        this to `student` retrieves users with the role of student.

        - `search` (string): A search term to filter users by name . An empty
        string retrieves all users.

        - `orderBy` (string): The field by which to sort the results. In this
        case (points,name).

        - `direction` (string): The direction of sorting. Possible values are
        `asc` for ascending and `desc` for descending. .


        ### Response


        #### Response Structure


        - `status` (boolean): Indicates the success of the request.

        - `message` (string)

        - `users` (array): An array of user objects, each containing:

            - `id` (integer): Unique identifier for the user.

            - `name` (string): The name of the user.

            - `email` (string): The email address of the user.

            - `image` (string): URL to the user's profile image.

            - `gitHub_account` (string): The user's GitHub account link.

            - `bio` (string): A short biography of the user.

            - `last_online` (string): Timestamp of the user's last online activity.

            - `role` (string): The role of the user (e.g., student).

            - `joined` (string): Date the user joined.

            - `age` (integer or null): The age of the user.

            - `points` (integer): Points accumulated by the user.

            - `level` (string): User's level based on points.

            - `completed_courses` (integer): Number of courses completed by the user.

            - `completed_learning_paths` (integer): Number of learning paths completed by the user.

            - `is_friend` (boolean|integer): Indicates friendship status (0 for not friends, 1 for friends).

        - `meta` (object): Contains pagination information:

            - `current_page` (integer): The current page number.

            - `last_page` (integer): The total number of pages available.

            - `per_page` (integer): Number of users per page.

            - `total` (integer): Total number of users available.
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: integer
          description: page in pagination
          example: '1'
        - name: friends
          in: query
          schema:
            type: integer
          description: 0 or 1 for showing just friends
          example: '0'
        - name: role
          in: query
          schema:
            type: string
          description: student , teacher
          example: teacher
        - name: search
          in: query
          schema:
            type: string
          description: search by name
        - name: orderBy
          in: query
          schema:
            type: string
          description: 'points , name '
          example: points
        - name: direction
          in: query
          schema:
            type: string
          example: desc
        - name: items
          in: query
          schema:
            type: integer
          description: items per page min 10 max 30
          example: '10'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: users retrieved successfully
                users:
                  - id: 14
                    name: Olen Ruecker
                    email: eleannon@example.net
                    image: https://via.placeholder.com/640x480.png/00ffdd?text=iure
                    gitHub_account: http://bogisich.com/inventore-sed-deleniti-dolor-facere
                    bio: >-
                      Nisi dolores debitis et tenetur laudantium veniam. Est
                      eaque ex velit quod sunt reiciendis.
                    last_online: 42 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 821018406
                    level: beginner
                    completed_courses: 2
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 22
                    name: Garrett Keeling
                    email: pearl88@example.com
                    image: >-
                      https://via.placeholder.com/640x480.png/00bb11?text=praesentium
                    gitHub_account: http://rau.com/
                    bio: >-
                      Voluptatum omnis facilis voluptatem sed. Aspernatur rerum
                      sint dignissimos asperiores dolor qui. Nesciunt
                      consequatur assumenda aliquam cum ut animi.
                    last_online: 42 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 66828149
                    level: beginner
                    completed_courses: 1
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 20
                    name: Arvid Trantow
                    email: lance48@example.net
                    image: >-
                      https://via.placeholder.com/640x480.png/008800?text=dolorem
                    gitHub_account: >-
                      https://www.cummings.com/quia-et-repudiandae-et-architecto-ex-reiciendis-explicabo-repellat
                    bio: >-
                      Suscipit fugit laudantium eveniet sint. Voluptatum
                      asperiores libero aperiam quas et dolor quae consequuntur.
                      Dignissimos eum velit natus a.
                    last_online: 3 days ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 61742150
                    level: beginner
                    completed_courses: 2
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 13
                    name: Mr. Donny Adams I
                    email: maia43@example.com
                    image: https://via.placeholder.com/640x480.png/0022bb?text=omnis
                    gitHub_account: >-
                      https://www.heller.com/sit-reprehenderit-sapiente-qui-quaerat
                    bio: >-
                      Dolor autem corrupti dolores ducimus odio. Repellendus
                      natus eos deserunt nihil. Distinctio sit quia quo
                      temporibus eos voluptates quos. Ipsum odit tenetur veniam
                      veritatis qui sit eaque.
                    last_online: 3 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 7527191
                    level: beginner
                    completed_courses: 3
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 6
                    name: Irwin Greenholt PhD
                    email: dorthy78@example.net
                    image: https://via.placeholder.com/640x480.png/00aabb?text=aut
                    gitHub_account: http://murray.com/dolor-non-alias-sit.html
                    bio: >-
                      Nam a aut deserunt. Nam veniam nostrum repellendus et.
                      Voluptatem et voluptas perspiciatis illo tenetur sit ipsam
                      tempora.
                    last_online: 45 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 1081809
                    level: beginner
                    completed_courses: 1
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 7
                    name: Kitty Morar II
                    email: alfred29@example.org
                    image: https://via.placeholder.com/640x480.png/0044aa?text=et
                    gitHub_account: http://www.murphy.biz/ipsa-voluptatem-sed-nostrum-omnis
                    bio: >-
                      Est voluptatibus id quia omnis. Quis dignissimos et facere
                      a ut error. Magnam optio placeat ducimus officiis soluta.
                    last_online: 52 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 971576
                    level: beginner
                    completed_courses: 0
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 3
                    name: Wilfredo Ferry V
                    email: jmiller@example.net
                    image: https://via.placeholder.com/640x480.png/0055dd?text=ipsam
                    gitHub_account: >-
                      https://kihn.info/aut-modi-officiis-omnis-et-corrupti-maxime.html
                    bio: >-
                      Eveniet vel commodi enim laudantium qui sequi. Ipsa et
                      facere libero. Excepturi nobis explicabo consectetur amet
                      sit sed id aut.
                    last_online: 11 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 767800
                    level: beginner
                    completed_courses: 2
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 19
                    name: Erin Paucek
                    email: david.jaskolski@example.org
                    image: https://via.placeholder.com/640x480.png/004411?text=minima
                    gitHub_account: http://www.hickle.org/
                    bio: >-
                      Id voluptas aut exercitationem eius quod. Nobis et error
                      delectus delectus quae occaecati temporibus.
                    last_online: 53 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 284327
                    level: beginner
                    completed_courses: 1
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 21
                    name: Elody VonRueden
                    email: mccullough.vilma@example.com
                    image: >-
                      https://via.placeholder.com/640x480.png/0088bb?text=praesentium
                    gitHub_account: >-
                      http://www.russel.com/quia-repellendus-quae-animi-et-odio-accusantium-velit-maxime
                    bio: >-
                      Aut sequi nemo dolor nemo quaerat. Dolore fugit repellat
                      rerum aut sit veritatis culpa. Reprehenderit repellendus
                      nostrum eius eos voluptate.
                    last_online: 37 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 174301
                    level: beginner
                    completed_courses: 0
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 12
                    name: Adam Buckridge Sr.
                    email: bergstrom.andreane@example.org
                    image: https://via.placeholder.com/640x480.png/008844?text=est
                    gitHub_account: http://www.leannon.com/
                    bio: >-
                      Pariatur cupiditate repellendus ipsam aliquam. Officiis
                      incidunt asperiores voluptas in similique error esse
                      tenetur. Voluptates fuga et eos.
                    last_online: 30 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 87695
                    level: beginner
                    completed_courses: 1
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 15
                    name: Prof. Zola Steuber
                    email: augusta.dietrich@example.com
                    image: >-
                      https://via.placeholder.com/640x480.png/006677?text=reprehenderit
                    gitHub_account: >-
                      http://christiansen.com/deleniti-reiciendis-cum-sunt-numquam-non
                    bio: >-
                      Rem corporis ut perferendis quae. Aliquam modi dolorum sed
                      non nobis. Fugit magnam ipsa similique est.
                    last_online: 11 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 66207
                    level: beginner
                    completed_courses: 3
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 8
                    name: Ms. Destinee Rodriguez I
                    email: koby89@example.org
                    image: https://via.placeholder.com/640x480.png/004466?text=ea
                    gitHub_account: >-
                      https://www.weimann.info/qui-sit-voluptates-commodi-dolor-soluta-velit-sunt-similique
                    bio: >-
                      Sunt totam totam perferendis quidem sunt magni et.
                      Asperiores expedita sequi maxime ut sit quo aut rerum.
                      Quia non atque ab iste maiores et sequi. Quia assumenda
                      qui omnis adipisci dolores ut ea.
                    last_online: 16 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 61314
                    level: beginner
                    completed_courses: 1
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 16
                    name: Lucious Doyle
                    email: ipacocha@example.org
                    image: >-
                      https://via.placeholder.com/640x480.png/004433?text=officiis
                    gitHub_account: >-
                      http://www.parisian.org/dolorem-odit-optio-et-perspiciatis-corporis-qui-alias.html
                    bio: >-
                      Accusantium recusandae nihil tenetur. Qui ut quo
                      voluptates provident quos possimus. Exercitationem sunt
                      minus qui et hic sint necessitatibus.
                    last_online: 26 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 37535
                    level: beginner
                    completed_courses: 1
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 17
                    name: Jennings Breitenberg
                    email: hudson.suzanne@example.org
                    image: https://via.placeholder.com/640x480.png/0088bb?text=eaque
                    gitHub_account: http://www.koch.com/
                    bio: >-
                      Nam quis tempora minima nemo fuga quam. Explicabo
                      excepturi nostrum et sequi. Officia occaecati incidunt
                      modi deserunt non necessitatibus eos. Est in corporis
                      nihil ut in vel.
                    last_online: 11 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 7040
                    level: beginner
                    completed_courses: 2
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 11
                    name: Jana Rosenbaum
                    email: mondricka@example.com
                    image: https://via.placeholder.com/640x480.png/00eeff?text=maxime
                    gitHub_account: >-
                      http://lebsack.com/quidem-soluta-ut-blanditiis-quisquam-vero-fugiat-fugiat
                    bio: >-
                      Repudiandae ipsum quaerat alias corrupti et omnis. Omnis
                      sed nobis dolorem id et quia quos. Iste iusto et dolores
                      facilis quis et.
                    last_online: 53 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 672
                    level: beginner
                    completed_courses: 1
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 4
                    name: Ms. Mattie Lehner I
                    email: pouros.maximillia@example.net
                    image: >-
                      https://via.placeholder.com/640x480.png/00ff55?text=deserunt
                    gitHub_account: >-
                      http://boehm.biz/eos-cum-ratione-aut-consequatur-quam-voluptatem
                    bio: >-
                      Fugiat nulla quia voluptatem consequatur. Delectus qui est
                      ipsum. Nostrum vel blanditiis et reiciendis recusandae
                      eveniet.
                    last_online: 21 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 313
                    level: beginner
                    completed_courses: 1
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 18
                    name: Kayla Powlowski
                    email: bwalker@example.com
                    image: https://via.placeholder.com/640x480.png/00ee77?text=rerum
                    gitHub_account: >-
                      https://www.koelpin.com/enim-hic-dolorem-dolore-atque-ducimus
                    bio: >-
                      Mollitia magni sunt libero at nobis tenetur neque nulla.
                      Inventore et est architecto enim et. A architecto harum
                      nulla sunt dolorem itaque.
                    last_online: 12 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 34
                    level: beginner
                    completed_courses: 2
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 9
                    name: Alejandrin O'Hara
                    email: aromaguera@example.org
                    image: >-
                      https://via.placeholder.com/640x480.png/004433?text=voluptas
                    gitHub_account: >-
                      http://white.com/et-aperiam-ut-voluptatem-totam-voluptatem-voluptas-veniam.html
                    bio: >-
                      Voluptas consectetur omnis ea repellendus ullam. Sint
                      facilis totam in assumenda sapiente est id eum.
                    last_online: 51 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 6
                    level: beginner
                    completed_courses: 1
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 5
                    name: Autumn Hoeger
                    email: athena36@example.com
                    image: https://via.placeholder.com/640x480.png/00eebb?text=eius
                    gitHub_account: >-
                      http://www.bosco.com/repudiandae-temporibus-vitae-perferendis-pariatur-sed
                    bio: >-
                      Et voluptatem autem velit. Repellendus consequatur officia
                      recusandae amet. Dolores nostrum ut quam quia.
                    last_online: 53 years ago
                    role: student
                    joined: '2025-06-19'
                    age: null
                    points: 5
                    level: beginner
                    completed_courses: 1
                    completed_learning_paths: 0
                    is_friend: 0
                  - id: 2
                    name: ddd
                    email: student@student.com
                    image: null
                    gitHub_account: https://github.com/ABDALRZAQ345
                    bio: ''
                    last_online: 2 days ago
                    role: student
                    joined: '2025-06-19'
                    age: 12
                    points: 0
                    level: beginner
                    completed_courses: 1
                    completed_learning_paths: 0
                    is_friend: 0
                meta:
                  current_page: 1
                  last_page: 2
                  per_page: 20
                  total: 22
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
  /api/me:
    get:
      tags:
        - User
      summary: me
      description: >-
        ### Get User Information


        This endpoint retrieves the information of the currently authenticated
        user. Upon a successful request, it returns a JSON object containing the
        user's details, including their ID, name, email, profile image, GitHub
        account, bio, last online status, role, level, join date, and age.


        #### Response Structure


        - **status**: A boolean indicating the success of the request.

        - **user**: An object containing user details:

            - **id**: The unique identifier for the user.

            - **name**: The name of the user.

            - **email**: The email address of the user.

            - **image**: The URL of the user's profile image (if available).

            - **gitHub_account**: The user's GitHub account username (if available).

            - **bio**: A brief biography of the user.

            - **last_online**: The last time the user was online.

            - **role**: The role of the user within the application.

            - **level**: The user's level .( just for students)

            - **joined**: The date the user joined the platform.

            - **age**: The age of the user.

            - **points** the total points for user ( just for students)


        #### Example Response


        ``` json

        {
          "status": true,
          "user": {
            "id": 0,
            "name": "",
            "email": "",
            "image": null,
            "gitHub_account": "",
            "bio": "",
            "last_online": "",
            "role": "",
            "level": "",
            "joined": "",
            "age": 0
          }
        }

         ```
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                user:
                  id: 1
                  name: d
                  email: admin@admin.com
                  image: null
                  gitHub_account: https://github.com/ABDALRZAQ3
                  bio: ''
                  last_online: online
                  role: admin
                  level: beginner
                  joined: '2025-06-19'
                  age: 12
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
  /api/users/2/certificates:
    get:
      tags:
        - User
      summary: User certificates
      description: >-
        ### Get User Information


        This endpoint retrieves the information of the currently authenticated
        user. Upon a successful request, it returns a JSON object containing the
        user's details, including their ID, name, email, profile image, GitHub
        account, bio, last online status, role, level, join date, and age.


        #### Response Structure


        - **status**: A boolean indicating the success of the request.

        - **user**: An object containing user details:

            - **id**: The unique identifier for the user.

            - **name**: The name of the user.

            - **email**: The email address of the user.

            - **image**: The URL of the user's profile image (if available).

            - **gitHub_account**: The user's GitHub account username (if available).

            - **bio**: A brief biography of the user.

            - **last_online**: The last time the user was online.

            - **role**: The role of the user within the application.

            - **level**: The user's level .( just for students)

            - **joined**: The date the user joined the platform.

            - **age**: The age of the user.

            - **points** the total points for user ( just for students)


        #### Example Response


        ``` json

        {
          "status": true,
          "user": {
            "id": 0,
            "name": "",
            "email": "",
            "image": null,
            "gitHub_account": "",
            "bio": "",
            "last_online": "",
            "role": "",
            "level": "",
            "joined": "",
            "age": 0
          }
        }

         ```
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Mon, 30 Jun 2025 20:47:02 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '27'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                certificates:
                  - course_id: 30
                    url: http://conn.net/expedita-nostrum-iure-molestiae-enim
                    obtain_date: '2025-06-30'
                    title: Sunt qui ex esse.
                  - course_id: 30
                    url: http://wuckert.info/odit-at-nemo-placeat-repellendus.html
                    obtain_date: '2025-06-30'
                    title: Sunt qui ex esse.
                  - course_id: 11
                    url: null
                    obtain_date: '2025-06-30'
                    title: Dignissimos quia voluptatibus explicabo.
                  - course_id: 11
                    url: null
                    obtain_date: '2025-06-30'
                    title: Dignissimos quia voluptatibus explicabo.
                meta:
                  current_page: 1
                  last_page: 1
                  per_page: 20
                  total: 4
  /api/video/2/comments:
    get:
      tags:
        - Courses > Students > Comments
      summary: show comments of video
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Courses > Students > Comments
      summary: add comment
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: final test
                comment_id:
                  type: integer
                  description: id of comment I replay / {optinal}
                  example: '1050'
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/comments/1053:
    put:
      tags:
        - Courses > Students > Comments
      summary: update comment
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                text:
                  type: string
                  example: this is the first update
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/comments/1022:
    delete:
      tags:
        - Courses > Students > Comments
      summary: delete comment
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/comment/1050/likes:
    post:
      tags:
        - Courses > Students > Comments
      summary: likes a comment
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/courses/1/video/2:
    get:
      tags:
        - Courses > Students > Videos
      summary: show video
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/courses/1/video/2/updateProgress:
    post:
      tags:
        - Courses > Students > Videos
      summary: update progress
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                progress:
                  type: integer
                  example: '50'
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/courses/1/video/2/completed:
    put:
      tags:
        - Courses > Students > Videos
      summary: complete the video
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties: {}
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/courses/68/tests/12:
    get:
      tags:
        - Courses > Students > Quizes (tests)
      summary: show test
      description: >-
        ### API Endpoint: Retrieve Test Details


        This endpoint retrieves details of a specific test associated with a
        course. The request is made using the HTTP GET method.


        #### Request


        - **URL**: `{{BaseUrl}}/api/courses/{courseId}/tests/{testId}`

        - **Method**: GET

        - **Path Parameters**:

            - `courseId` (integer): The unique identifier of the course.

            - `testId` (integer): The unique identifier of the test that belongs to the course .


        #### Response


        ``` json

        {
            "status": true,
            "message": "test  received successfully",
            "already_taken": true,
            "best_result": "0%",
            "test": {
                "id": 52,
                "title": "final",
                "is_final": 1,
                "questions_count": 2,
                "questions": [
                    {
                        "id": 526,
                        "text": "which is for comparing two objects",
                        "options": [
                            {
                                "id": 2102,
                                "answer": "!="
                            },
                            {
                                "id": 2101,
                                "answer": "="
                            },
                            {
                                "id": 2100,
                                "answer": "=="
                            }
                        ]
                    },
                    {
                        "id": 527,
                        "text": "what is the xor operation",
                        "options": [
                            {
                                "id": 2103,
                                "answer": "^"
                            },
                            {
                                "id": 2106,
                                "answer": "-="
                            },
                            {
                                "id": 2104,
                                "answer": "&&"
                            },
                            {
                                "id": 2105,
                                "answer": "+"
                            }
                        ]
                    }
                ]
            }
        }
         ```

        #### Notes


        - The `already_taken` field indicates whether the test has been
        attempted by the user.
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Mon, 30 Jun 2025 15:33:36 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: test  received successfully
                already_taken: true
                best_result: 0%
                test:
                  id: 52
                  title: final
                  is_final: 1
                  questions_count: 2
                  questions:
                    - id: 526
                      text: which is for comparing two objects
                      options:
                        - id: 2102
                          answer: '!='
                        - id: 2101
                          answer: '='
                        - id: 2100
                          answer: '=='
                    - id: 527
                      text: what is the xor operation
                      options:
                        - id: 2103
                          answer: ^
                        - id: 2106
                          answer: '-='
                        - id: 2104
                          answer: '&&'
                        - id: 2105
                          answer: +
        '401':
          description: Unauthorized
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:21:16 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
        '404':
          description: Not Found
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:20:35 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object not found
  /api/courses/11/tests/52:
    post:
      tags:
        - Courses > Students > Quizes (tests)
      summary: quiz submit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                start_time: '2025-06-27 20:15:00'
                answers:
                  '526': 2100
                  '527': 2103
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Mon, 30 Jun 2025 15:31:45 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '28'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: quiz submit
                  value:
                    status: true
                    message: 'test success '
                    correct_answers: 100%
                example-1:
                  summary: quiz submit
                  value:
                    status: true
                    message: test failed you should gain more than 60%
                    correct_answers: 0%
        '400':
          description: Bad Request
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Mon, 30 Jun 2025 15:29:07 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: quiz submit
                  value:
                    status: false
                    message: you cant retake final test when you pass it
                example-1:
                  summary: quiz submit
                  value:
                    status: false
                    message: >-
                      you can`t take the final test more than once per day back
                      again in 20 hours from now
        '401':
          description: Unauthorized
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Mon, 30 Jun 2025 15:27:42 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
        '404':
          description: Not Found
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:37:56 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object not found
  /api/courses:
    get:
      tags:
        - Courses > Students > Course
      summary: Get all courses and watch later...
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: orderBy
          in: query
          schema:
            type: string
          description: date , rate , title
          example: rate
        - name: direction
          in: query
          schema:
            type: string
          description: asc ,desc
          example: desc
        - name: status
          in: query
          schema:
            type: string
          description: all , enrolled , watch_later , finished
          example: all
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/learningPath/2/courses:
    get:
      tags:
        - Courses > Students > Course
      summary: Get courses in learning path
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/courses/12/description:
    get:
      tags:
        - Courses > Students > Course
      summary: Show description course without learning path
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/courses/12/enroll:
    post:
      tags:
        - Courses > Students > Course
      summary: Enroll course
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                payment_method_id: pm_card_visa
                amount: 61
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/courses/10/content:
    get:
      tags:
        - Courses > Students > Course
      summary: Show content course
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Mon, 30 Jun 2025 10:22:22 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                successful: true
                message: Get Course Content Successfully
                data:
                  id: 10
                  title: Deleniti totam explicabo.
                  description: >-
                    Dolorem cumque voluptatem aliquid molestias sint. Provident
                    dolorem tempore vero delectus. Et est sapiente laboriosam
                    velit. Consequatur quam et consequatur distinctio labore
                    aut.
                  is_enrolled: false
                  total_videos: 6
                  watched_videos: 0
                  course_progress: 0 %
                  content:
                    - id: 55
                      title: Ut quis et.
                      type: video
                      order: 1
                      progress: 0 %
                      is_free: false
                      watched: false
                    - id: 56
                      title: Ipsum consequatur quibusdam.
                      type: video
                      order: 2
                      progress: 0 %
                      is_free: false
                      watched: false
                    - id: 57
                      title: Voluptate fuga assumenda.
                      type: video
                      order: 3
                      progress: 0 %
                      is_free: true
                      watched: false
                    - id: 10
                      title: Molestiae quia sunt quis.
                      type: test
                      order: 4
                      is_final: false
                      completed: false
                    - id: 58
                      title: Necessitatibus enim non nesciunt doloribus.
                      type: video
                      order: 5
                      progress: 0 %
                      is_free: true
                      watched: false
                    - id: 59
                      title: Dolor dolor nihil.
                      type: video
                      order: 6
                      progress: 0 %
                      is_free: false
                      watched: false
                    - id: 60
                      title: Qui mollitia repudiandae.
                      type: video
                      order: 7
                      progress: 0 %
                      is_free: false
                      watched: false
  /api/courses/12/watch_later:
    post:
      tags:
        - Courses > Students > Course
      summary: Add to watch later
      requestBody:
        content: {}
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Courses > Students > Course
      summary: Remove from watch later
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/teacher/myCourses:
    get:
      tags:
        - Courses > Teachers > Course
      summary: All Courses of teacher
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: items
          in: query
          schema:
            type: integer
          example: '5'
        - name: page
          in: query
          schema:
            type: integer
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/teacher/courses/81/description:
    get:
      tags:
        - Courses > Teachers > Course
      summary: Show course description
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/teacher/courses/85/content:
    get:
      tags:
        - Courses > Teachers > Course
      summary: Show course content
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/teacher/courses/myVerifiedCourses:
    get:
      tags:
        - Courses > Teachers > Course
      summary: Just verified courses
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/teacher/courses:
    post:
      tags:
        - Courses > Teachers > Course
      summary: Create course
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: the first course create
                description:
                  type: string
                  example: test one to create great course
                image:
                  type: string
                  format: binary
                price:
                  type: integer
                  example: '100'
                level:
                  type: string
                  description: beginner,  intermediate,  advanced,  expert
                  example: intermediate
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Courses > Teachers > Course
      summary: Get All Verified Courses
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: items
          in: query
          schema:
            type: integer
          example: '20'
        - name: filter
          in: query
          schema:
            type: string
          description: own, public{ public don't have my course }
          example: public
        - name: page
          in: query
          schema:
            type: integer
          example: '4'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/teacher/courses/81:
    post:
      tags:
        - Courses > Teachers > Course
      summary: update course
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: second update
                description:
                  type: string
                  example: update the course description
                image:
                  type: string
                  format: binary
                price:
                  type: integer
                  example: '20'
                level:
                  type: string
                  description: beginner,  intermediate,  advanced,  expert
                  example: beginner
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/teacher/courses/82:
    delete:
      tags:
        - Courses > Teachers > Course
      summary: Delete Course
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/teacher/courses/85/reorder-contest:
    post:
      tags:
        - Courses > Teachers > Course
      summary: Reorder-content
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                order:
                  - video_306
                  - video_307
                  - video_308
                  - video_303
                  - video_304
                  - video_305
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/teacher/courses/85/video:
    get:
      tags:
        - Courses > Teachers > Videos
      summary: Get all videos in course
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/teacher/courses/85/video/303:
    get:
      tags:
        - Courses > Teachers > Videos
      summary: show one video in course
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/teacher/video_url:
    post:
      tags:
        - Courses > Teachers > Videos
      summary: Add video to course
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: third video
                description:
                  type: string
                  example: كورس البرمجة للمبتدئين باستخدام لغة سي بلس بلس
                url:
                  type: string
                  example: https://youtu.be/z1FdInL8sjg?si=lvtBZPvmP0xG3Jc6
                free:
                  type: integer
                  description: true or false => 1 or 0
                  example: '1'
                duration:
                  type: integer
                  example: '7'
                course_id:
                  type: integer
                  example: '85'
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/teacher/video_url/302:
    put:
      tags:
        - Courses > Teachers > Videos
      summary: update video
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                title:
                  type: string
                description:
                  type: string
                  example: update description
                url:
                  type: string
                  example: https://youtu.be/z1FdInL8sjg?si=lvtBZPvmP0xG3Jc6
                free:
                  type: integer
                  example: '0'
                course_id:
                  type: integer
                  example: '85'
                duration:
                  type: integer
                  example: '7'
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Courses > Teachers > Videos
      summary: Delete Video
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/courses:
    get:
      tags:
        - Courses > Admin
      summary: Requests Courses
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: items
          in: query
          schema:
            type: integer
          example: '20'
        - name: page
          in: query
          schema:
            type: integer
          example: '2'
        - name: orderBy
          in: query
          schema:
            type: string
          description: title , date
          example: date
        - name: direction
          in: query
          schema:
            type: string
          description: asc , desc
          example: asc
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/requests/courses/85:
    post:
      tags:
        - Courses > Admin
      summary: Accept Course
      requestBody:
        content: {}
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/requests/courses/1:
    delete:
      tags:
        - Courses > Admin
      summary: Reject Course
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/learningPath:
    get:
      tags:
        - Learning paths > Students
      summary: Get all learning path
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/learningPath/3:
    put:
      tags:
        - Learning paths > Students
      summary: Update status of learning path
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                status:
                  type: string
                  description: watch_later , enroll
                  example: enroll
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Learning paths > Students
      summary: Show learning path
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/learningPath/2:
    delete:
      tags:
        - Learning paths > Students
      summary: back to all status
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/teacher/myLearningPaths:
    get:
      tags:
        - Learning paths > Teacher
      summary: Teacher Learning paths
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: items
          in: query
          schema:
            type: integer
          example: '10'
        - name: page
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/teacher/learningPath/1:
    get:
      tags:
        - Learning paths > Teacher
      summary: Show one Learning path
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/users/5/friends:
    get:
      tags:
        - Friends
      summary: get user s friends
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: page
          in: query
          schema:
            type: string
        - name: items
          in: query
          schema:
            type: integer
          example: '15'
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:38:58 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: get user s friends
                  value:
                    status: true
                    friends:
                      - id: 6
                        name: Prof. Cade Stracke
                        email: hirthe.greyson@example.com
                        image: >-
                          https://via.placeholder.com/640x480.png/0044dd?text=nulla
                        gitHub_account: http://legros.com/
                        bio: >-
                          Eius praesentium neque facere nam sed. Accusantium
                          provident iure ut repudiandae. Adipisci quibusdam at
                          fuga quasi aut natus. Vel debitis officia deserunt
                          quibusdam non aut.
                        last_online: 20 years ago
                        role: student
                        joined: '2025-06-30'
                        age: 17
                        points: 9239
                        level: beginner
                        current_streak: 0
                        completed_courses: 0
                        completed_learning_paths: 0
                        is_friend: 1
                      - id: 8
                        name: Pat Wiza
                        email: marilie23@example.com
                        image: >-
                          https://via.placeholder.com/640x480.png/00ddff?text=odit
                        gitHub_account: >-
                          https://www.rogahn.com/iure-consectetur-temporibus-quia-esse
                        bio: >-
                          Quam illum debitis aut vitae. Delectus aut quaerat sit
                          nostrum. Et non minus non.
                        last_online: 52 years ago
                        role: student
                        joined: '2025-06-30'
                        age: 52
                        points: 4959
                        level: advanced
                        current_streak: 0
                        completed_courses: 1
                        completed_learning_paths: 0
                        is_friend: 0
                      - id: 17
                        name: Lucienne Steuber
                        email: buford.rohan@example.org
                        image: https://via.placeholder.com/640x480.png/0077cc?text=et
                        gitHub_account: >-
                          http://wilkinson.biz/nisi-et-voluptas-non-et-dolorem-vero-architecto
                        bio: >-
                          Et voluptas voluptatibus hic a eos ad pariatur
                          numquam. Minima earum ex eius enim et rem. Pariatur
                          enim eius rem quia quia.
                        last_online: 22 years ago
                        role: student
                        joined: '2025-06-30'
                        age: 45
                        points: 4978
                        level: expert
                        current_streak: 0
                        completed_courses: 2
                        completed_learning_paths: 0
                        is_friend: 0
                    meta:
                      current_page: 1
                      last_page: 1
                      per_page: 20
                      total: 3
                example-1:
                  summary: get user s friends
                  value:
                    status: true
                    friends: []
                    meta:
                      current_page: 1
                      last_page: 1
                      per_page: 20
                      total: 0
        '404':
          description: Not Found
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:39:26 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '26'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: get user s friends
                  value:
                    status: false
                    message: Object not found.
                example-1:
                  summary: get user s friends
                  value:
                    status: false
                    message: Object not found
  /api/friends/9:
    post:
      tags:
        - Friends
      summary: add new friend
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:42:03 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: Friend added successfully.
        '400':
          description: Bad Request
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:42:10 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '28'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: This user is already your friend.
        '401':
          description: Unauthorized
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:41:37 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
  /api/friends/19:
    delete:
      tags:
        - Friends
      summary: delete  friend
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:43:06 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: Friend removed successfully
        '400':
          description: Bad Request
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:42:50 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '27'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: the user is not a friend
        '401':
          description: Unauthorized
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:42:25 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
  /api/courses/14/reviews:
    get:
      tags:
        - Reviews
      summary: Get all reviews in course
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Reviews
      summary: add review
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: this is the first review
                rate:
                  type: integer
                  example: '4'
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/courses/4/reviews:
    put:
      tags:
        - Reviews
      summary: update review
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                comment:
                  type: string
                  example: update review
                rate:
                  type: integer
                  example: '1'
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Reviews
      summary: delete review
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/projects/4:
    get:
      tags:
        - Project
      summary: show project
      description: هذا الركوست ممكن ينضرب من طرف guest
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:48:13 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                project:
                  id: 4
                  title: Ipsam praesentium harum odio error ullam molestias labore.
                  user_id: 1
                  description: >-
                    Sit sunt et et est et. Rerum dicta ut corrupti. Ut dolor et
                    dolores totam sed veniam cupiditate. Laudantium non nesciunt
                    ea nam dicta sunt id in.
                  technologies: null
                  links: null
                  likes: 0
                  status: accepted
                  tag_id: 1
                  created_at: '2025-06-30T10:48:27.000000Z'
                  updated_at: '2025-06-30T10:48:27.000000Z'
                  user_name: admin
                  tag_name: web development
        '403':
          description: Forbidden
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:44:52 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Forbidden
        '404':
          description: Not Found
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:45:13 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '26'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object not found.
  /api/projects:
    post:
      tags:
        - Project
      summary: add project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: dd
                description: ddd
                technologies:
                  - c++
                  - opengl
                links:
                  - gitHub_url: abdlarzaqnajieb@gmail.com
                  - demo: demo.com
                  - steam: game/x/steam.com
                tag_id: 1
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:48:57 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: add project
                  value:
                    status: true
                    message: project added successfully
                example-1:
                  summary: add project
                  value:
                    status: false
                    message: 'you can`t send more than 3 projects requests a month '
        '401':
          description: Unauthorized
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:49:35 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
    get:
      tags:
        - Project
      summary: projects
      description: >-
        ### Request Description


        This is a **GET** request to retrieve a list of projects from the API.


        **Endpoint:** `{{BaseUrl}}/api/projects`


        **Query Parameters:**


        - `tag` (string): Used to filter projects by tag. Example value: `all`.

        - `search` (string): A search term to filter projects. Currently, this
        can be left empty.

        - `page` (integer): The page number for pagination. This is used to
        navigate through multiple pages of results.


        ### Expected Response


        The response is returned in JSON format and includes the following
        structure:


        - `status` (boolean): Indicates whether the request was successful.

        - `data` (array): An array of project objects, each containing:

            - `id` (integer): The unique identifier for the project.

            - `title` (string): The title of the project.

            - `user_id` (integer): The ID of the user who created the project.

            - `description` (string): A brief description of the project.

            - `technologies` (array or null): The technologies used in the project, if available.

            - `links` (array or null): Any relevant links associated with the project, if available.

            - `likes` (integer): The number of likes the project has received.

            - `status` (string): The current status of the project.

            - `tag_id` (integer): The ID of the tag associated with the project.

            - `created_at` (string): The timestamp when the project was created.

            - `updated_at` (string): The timestamp when the project was last updated.

            - `user_name` (string): The name of the user who created the project.

            - `tag_name` (string): The name of the tag associated with the project.

        - `meta` (object): Contains pagination information:

            - `current_page` (integer): The current page number.

            - `last_page` (integer): The last page number available.

            - `per_page` (integer): The number of items per page.

            - `total` (integer): The total number of items available.


        ### Tags :


        web development


        mobile development


        Data


        Game development


        Desktop Applications


        Artificial intelligent


        DevOps


        Other
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: tag
          in: query
          schema:
            type: string
          description: |-
            name of the tag or all to get all
            tags are :
            web development
            mobile development
            Data
            Game development
            Desktop Applications
            Artificial intelligent
            DevOps
            Other
          example: all
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: string
        - name: items
          in: query
          schema:
            type: integer
          example: '15'
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:52:36 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                data:
                  - id: 4
                    title: Ipsam praesentium harum odio error ullam molestias labore.
                    user_id: 1
                    description: >-
                      Sit sunt et et est et. Rerum dicta ut corrupti. Ut dolor
                      et dolores totam sed veniam cupiditate. Laudantium non
                      nesciunt ea nam dicta sunt id in.
                    technologies: null
                    links: null
                    likes: 0
                    status: accepted
                    tag_id: 1
                    created_at: '2025-06-30T10:48:27.000000Z'
                    updated_at: '2025-06-30T10:48:27.000000Z'
                    user_name: admin
                    tag_name: web development
                  - id: 5
                    title: Modi soluta aut mollitia.
                    user_id: 1
                    description: >-
                      Omnis consequuntur eaque neque officia. Vitae deleniti
                      quibusdam quis harum reprehenderit fugit alias
                      accusantium. Harum sequi quam neque laudantium impedit et.
                      Sunt sunt quo repudiandae velit sunt.
                    technologies: null
                    links: null
                    likes: 0
                    status: accepted
                    tag_id: 7
                    created_at: '2025-06-30T10:48:27.000000Z'
                    updated_at: '2025-06-30T10:48:27.000000Z'
                    user_name: admin
                    tag_name: DevOps
                  - id: 6
                    title: Reprehenderit amet repudiandae magnam.
                    user_id: 20
                    description: >-
                      Placeat ut omnis doloremque laboriosam alias. Fugiat
                      perferendis odio exercitationem asperiores quis eveniet.
                      Id esse qui voluptate consequuntur.
                    technologies: null
                    links: null
                    likes: 0
                    status: accepted
                    tag_id: 7
                    created_at: '2025-06-30T10:48:27.000000Z'
                    updated_at: '2025-06-30T10:48:27.000000Z'
                    user_name: Raina Gusikowski
                    tag_name: DevOps
                meta:
                  current_page: 1
                  last_page: 1
                  per_page: 20
                  total: 3
  /api/tags:
    get:
      tags:
        - Project
      summary: projects tags
      description: هذا الركوست ممكن ينضرب من طرف guest
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:53:23 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '28'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                tags:
                  - id: 1
                    name: web development
                    created_at: '2025-06-30T10:48:27.000000Z'
                    updated_at: '2025-06-30T10:48:27.000000Z'
                  - id: 2
                    name: mobile development
                    created_at: '2025-06-30T10:48:27.000000Z'
                    updated_at: '2025-06-30T10:48:27.000000Z'
                  - id: 3
                    name: Data
                    created_at: '2025-06-30T10:48:27.000000Z'
                    updated_at: '2025-06-30T10:48:27.000000Z'
                  - id: 4
                    name: 'Game development '
                    created_at: '2025-06-30T10:48:27.000000Z'
                    updated_at: '2025-06-30T10:48:27.000000Z'
                  - id: 5
                    name: Desktop Applications
                    created_at: '2025-06-30T10:48:27.000000Z'
                    updated_at: '2025-06-30T10:48:27.000000Z'
                  - id: 6
                    name: 'Artificial intelligent '
                    created_at: '2025-06-30T10:48:27.000000Z'
                    updated_at: '2025-06-30T10:48:27.000000Z'
                  - id: 7
                    name: DevOps
                    created_at: '2025-06-30T10:48:27.000000Z'
                    updated_at: '2025-06-30T10:48:27.000000Z'
                  - id: 8
                    name: Other
                    created_at: '2025-06-30T10:48:27.000000Z'
                    updated_at: '2025-06-30T10:48:27.000000Z'
  /api/projects/4/like:
    post:
      tags:
        - Project
      summary: Like project
      requestBody:
        content: {}
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:57:43 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '28'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: Liked successfully
        '400':
          description: Bad Request
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:57:59 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Already Liked
        '401':
          description: Unauthorized
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:57:09 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
        '403':
          description: Forbidden
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:56:55 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Forbidden
        '404':
          description: Not Found
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:57:19 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object not found.
  /api/projects/1/like:
    delete:
      tags:
        - Project
      summary: delete like
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:59:03 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: Like deleted  successfully
        '400':
          description: Bad Request
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:59:16 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '28'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: You dont Liked it at all
        '401':
          description: Unauthorized
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:58:26 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                message: Unauthenticated.
        '403':
          description: Forbidden
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:58:13 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '28'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Forbidden
        '404':
          description: Not Found
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 08:58:49 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '26'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object not found.
  /api/admin/requests/contests/17:
    post:
      tags:
        - Admin > Contest Requests
      summary: Accept Contest
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/requests/contests/22:
    delete:
      tags:
        - Admin > Contest Requests
      summary: Reject Contest
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/requests/contests:
    get:
      tags:
        - Admin > Contest Requests
      summary: Contests Requests
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/requests/projects:
    get:
      tags:
        - Admin > Project Requests
      summary: projects requests
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/requests/projects/16:
    post:
      tags:
        - Admin > Project Requests
      summary: Accept Project
      requestBody:
        content: {}
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/requests/projects/5:
    delete:
      tags:
        - Admin > Project Requests
      summary: Reject Project
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/statistics:
    get:
      tags:
        - Admin > Statistics
      summary: statistics (overview)
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/statistics/students/perMonth:
    get:
      tags:
        - Admin > Statistics
      summary: students statistics PerMonth
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/statistics/students/lastWeek:
    get:
      tags:
        - Admin > Statistics
      summary: students statistics LastWeek
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/statistics/projects:
    get:
      tags:
        - Admin > Statistics
      summary: statistics projects
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/teachers:
    post:
      tags:
        - Admin
      summary: add teacher
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: teacher 1
                email:
                  type: string
                  example: ss@gmail.com
                password:
                  type: string
                  example: 123456/*-+asdA
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 11:24:45 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: Teacher created successfully
                data:
                  email: ss@gmail.com
                  password: 123456/*-+asdA
        '422':
          description: Unprocessable Content
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 11:24:52 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '28'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  email:
                    - The email has already been taken.
  /api/contests/1/problems:
    get:
      tags:
        - Contest > programming contests
      summary: contest problems
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/contests/3/problems/2:
    get:
      tags:
        - Contest > programming contests
      summary: show problem
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/contests/1/problems/2/submissions:
    get:
      tags:
        - Contest > programming contests
      summary: show problem submission
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: status
          in: query
          schema:
            type: string
          description: >-
            in wrong_answer, accepted, pending ,runtime_error,
            memory_limit_exceeded, time_limit_exceeded, compile_error, all
          example: all
        - name: user_id
          in: query
          schema:
            type: string
          description: 'integer or empty for all users '
        - name: language
          in: query
          schema:
            type: string
          description: in cpp java python csharp
          example: cpp
        - name: page
          in: query
          schema:
            type: string
          description: defult is 1
        - name: items
          in: query
          schema:
            type: integer
          description: items per page min 10 max 30
          example: '22'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/contests/22/problems/5/submissions:
    post:
      tags:
        - Contest > programming contests
      summary: submit problem
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                language:
                  type: string
                  description: cpp python java csharp
                  example: cpp
                code:
                  type: string
                  example: |
                    #include<iostream>
                    using namespace std;


                    int main() {
                        int t; cin>>t;


                        while(t--) {
                        int n; cin>>n;
                    int sum=0;


                    int a[n]; for(int i=0;i<n;i++) {cin>>a[i];
                    sum+=a[i]; }
                    cout<<(double)(sum/(double)n)<<endl;

                        }



                    }
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/contests/18/submissions:
    get:
      tags:
        - Contest > programming contests
      summary: show contest submissions
      description: هذا الركوست ممكن ينضرب من طرف guest
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/contests/6/questions:
    get:
      tags:
        - Contest > Quiz Contests
      summary: contest questions
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 09:06:04 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '28'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                contest_type: quiz
                alreadyParticipate: false
                questions_count: 8
                questions:
                  - id: 388
                    text: >-
                      Autem sed aut omnis velit enim dolore doloremque aut ut
                      voluptas aut.?
                    options:
                      - id: 1551
                        answer: Dolorem iure.
                      - id: 1550
                        answer: Non ducimus quisquam.
                      - id: 1549
                        answer: Quia cum exercitationem.
                      - id: 1552
                        answer: Unde aut cum.
                  - id: 389
                    text: >-
                      Magni possimus accusamus possimus nobis autem quasi
                      impedit tenetur rem aut aut.?
                    options:
                      - id: 1554
                        answer: Deserunt nisi et.
                      - id: 1553
                        answer: Eum voluptates itaque.
                      - id: 1556
                        answer: Nisi blanditiis dolor vel.
                      - id: 1555
                        answer: Quis voluptas sed atque.
                  - id: 390
                    text: Sed dicta quis minus quisquam cumque corporis quae.?
                    options:
                      - id: 1558
                        answer: Aut expedita est.
                      - id: 1559
                        answer: Expedita dolorem enim qui distinctio.
                      - id: 1560
                        answer: Quia voluptatem velit.
                      - id: 1557
                        answer: Sit repudiandae qui quia.
                  - id: 391
                    text: >-
                      Odit architecto voluptatum quia occaecati id quod fuga
                      optio deleniti quaerat.?
                    options:
                      - id: 1561
                        answer: Assumenda earum soluta.
                      - id: 1564
                        answer: Distinctio libero tempore tempore.
                      - id: 1562
                        answer: Odio provident veniam voluptates.
                      - id: 1563
                        answer: Velit ullam consequatur ab illo.
                  - id: 392
                    text: Sapiente iure cumque quia non minus nisi aut.?
                    options:
                      - id: 1566
                        answer: Architecto ut excepturi alias.
                      - id: 1565
                        answer: Est possimus aut eveniet.
                      - id: 1567
                        answer: Sed autem quo.
                      - id: 1568
                        answer: Sunt recusandae molestias ut.
                  - id: 393
                    text: >-
                      Quisquam ab natus architecto officiis quibusdam laborum
                      pariatur repudiandae excepturi itaque iusto quia
                      veritatis.?
                    options:
                      - id: 1571
                        answer: Est eveniet repellat ea.
                      - id: 1570
                        answer: Mollitia dolor iste.
                      - id: 1569
                        answer: Non non ducimus.
                      - id: 1572
                        answer: Repellat quis perferendis animi.
                  - id: 394
                    text: >-
                      Dolorem sint dignissimos velit voluptatem magni nam
                      adipisci magni atque modi praesentium enim ducimus.?
                    options:
                      - id: 1575
                        answer: Eos aspernatur cupiditate.
                      - id: 1574
                        answer: Saepe rem sed.
                      - id: 1573
                        answer: Sequi quam saepe.
                      - id: 1576
                        answer: Totam placeat inventore ut.
                  - id: 395
                    text: >-
                      Dolorum aperiam quos eum aut voluptatibus cupiditate
                      adipisci et mollitia dolor sint accusamus.?
                    options:
                      - id: 1579
                        answer: Aut in explicabo.
                      - id: 1580
                        answer: Error nesciunt sunt dignissimos veniam.
                      - id: 1577
                        answer: Expedita temporibus repudiandae.
                      - id: 1578
                        answer: Tempore beatae nobis non.
        '404':
          description: Not Found
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 09:06:21 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '27'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object not found.
  /api/contests/2/questions:
    post:
      tags:
        - Contest > Quiz Contests
      summary: contest questions submit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                answers:
                  '389': 1553
                  '390': 1558
                  '391': 1563
                  '392': 1568
                  '393': 1573
                  '394': 1578
                  '395': 1583
                  '396': 1588
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '422':
          description: Unprocessable Content
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 09:07:12 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '27'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  answers:
                    - >-
                      answers array is invalid maybe the question id  is not for
                      that quiz or option is not for that question
  /api/contests:
    get:
      tags:
        - Contest
      summary: contests
      description: >-
        ### Request Description


        This is an **HTTP GET** request to retrieve contests from the API.


        **Endpoint:** `{{BaseUrl}}/api/contests`


        **Query Parameters:**


        - `type` (string): Specifies the type of contests to retrieve. Example
        values include:

            - `all` (all or quiz or programming)

        - `status` (string): Indicates the status of the contests. Example
        values include:

            - `active`, `ended`, `coming`, `all`

        - `search` (string): A search term to filter contests. In the name


        **Expected Response:**


        - **Status Code:** 200

        - **Content-Type:** application/json

        - **Response Body:**

            - `status`: (boolean) Indicates if the request was successful.

            - `contests`: (array) A list of contest objects, each containing:

                - `id`: (integer) Unique identifier for the contest.

                - `name`: (string) Name of the contest.

                - `time`: (integer) Duration of the contest.

                - `description`: (string) Description of the contest.

                - `type`: (string) Type of the contest.

                - `level`: (string) Level of the contest.

                - `status`: (string) Current status of the contest.

                - `start_at`: (string) Start time of the contest.

                - `teacher_id`: (integer) Identifier for the teacher associated with the contest.

            - `meta`: (object) Pagination information, including:

                - `current_page`: (integer) The current page number.

                - `last_page`: (integer) The last page number.

                - `per_page`: (integer) Number of contests per page.

                - `total`: (integer) Total number of contests available.


        **Example Response:**


        ``` json

        {
          "status": true,
          "contests": [
            {
              "id": 0,
              "name": "",
              "time": 0,
              "description": "",
              "type": "",
              "level": "",
              "status": "",
              "start_at": "",
              "teacher_id": 0
            }
          ],
          "meta": {
            "current_page": 0,
            "last_page": 0,
            "per_page": 0,
            "total": 0
          }
        }

         ```
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: type
          in: query
          schema:
            type: string
          description: all quiz programming
          example: quiz
        - name: status
          in: query
          schema:
            type: string
          description: 'coming active ended all '
          example: active
        - name: search
          in: query
          schema:
            type: string
        - name: items
          in: query
          schema:
            type: integer
          description: items per page minimum 10 maximum 30
          example: '10'
        - name: page
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 09:00:44 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '26'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                contests:
                  - id: 11
                    name: Enim ut dolore quo.
                    time: 146
                    description: >-
                      Est modi consectetur dignissimos ut animi consequuntur
                      nesciunt voluptatem. Magni iste vel atque quisquam et. Cum
                      ex consequuntur ut ratione cumque consequuntur reiciendis.
                    type: programming
                    level: beginner
                    status: active
                    start_at: '2025-08-01 07:51:13'
                    teacher_id: 40
                  - id: 16
                    name: Enim unde natus cumque.
                    time: 33
                    description: >-
                      Iusto neque officia a voluptatem. Iste deserunt doloribus
                      optio sequi vero.
                    type: quiz
                    level: beginner
                    status: coming
                    start_at: '2025-07-07 02:12:39'
                    teacher_id: 36
                meta:
                  current_page: 1
                  last_page: 1
                  per_page: 20
                  total: 2
  /api/contests/17:
    get:
      tags:
        - Contest
      summary: show contest
      description: هذا الركوست ممكن ينضرب من طرف guest
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 09:02:50 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '27'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                contest:
                  id: 11
                  name: Enim ut dolore quo.
                  time: 146
                  description: >-
                    Est modi consectetur dignissimos ut animi consequuntur
                    nesciunt voluptatem. Magni iste vel atque quisquam et. Cum
                    ex consequuntur ut ratione cumque consequuntur reiciendis.
                  type: programming
                  level: beginner
                  status: active
                  start_at: '2025-08-01 07:51:13'
                  teacher_id: 40
        '404':
          description: Not Found
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 09:02:18 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object not found
  /api/contests/15/standing:
    get:
      tags:
        - Contest
      summary: show contest standing
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: justFriends
          in: query
          schema:
            type: integer
          description: 1 or 0
          example: '0'
        - name: page
          in: query
          schema:
            type: string
        - name: items
          in: query
          schema:
            type: string
          description: items per page minimum 10 maximum 30
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 09:04:13 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: 'results might not be calculated yet  '
                your_order: null
                students:
                  - id: 15
                    name: Lia Dickinson
                    end_time: '2025-08-04 04:25:47'
                    correct_answers: 7
                    gained_points: 94
                    rank: 1
                  - id: 14
                    name: Santa Friesen
                    end_time: '2025-08-01 09:51:13'
                    correct_answers: 6
                    gained_points: 11
                    rank: 2
                meta:
                  current_page: 1
                  last_page: 1
                  per_page: 20
                  total: 2
  /api/teacher/courses/11/tests:
    post:
      tags:
        - Teacher > Course Tests (quizes)
      summary: Create quiz on Course
      description: >-
        create quiz (test) on course it will be appended in the last and the
        test order can be edit later

        only the creator of the course can add tests to it
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: not final 2
                is_final: 0
                questions:
                  - question: 'which is for comparing two objects '
                    options:
                      - '=='
                      - '='
                      - '!='
                  - question: what is the xor operation
                    options:
                      - ^
                      - '&&'
                      - +
                      - '-='
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 11:30:44 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: test created successfully
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: there is already a final test
        '403':
          description: Forbidden
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 11:27:48 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Forbidden
  /api/teacher/courses/8/tests/52:
    put:
      tags:
        - Teacher > Course Tests (quizes)
      summary: edit quiz on course
      description: >-
        create quiz (test) on course it will be appended in the last and the
        test order can be edit later

        only the creator of the course can add tests to it
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: trying test
                questions:
                  - question: 'which is for assigments two objects '
                    options:
                      - '='
                      - '=='
                      - '!='
                  - question: what is the xor operation
                    options:
                      - ^
                      - '&&'
                      - +
                      - '-='
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 11:33:21 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '26'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: test updated successfully
        '403':
          description: Forbidden
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 11:32:44 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Forbidden
        '404':
          description: Not Found
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 11:33:03 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '27'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object not found.
  /api/teacher/courses/8/tests/8:
    delete:
      tags:
        - Teacher > Course Tests (quizes)
      summary: delete quiz on course
      description: >-
        create quiz (test) on course it will be appended in the last and the
        test order can be edit later

        only the creator of the course can add tests to it
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 11:35:11 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '28'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: test deleted successfully
        '403':
          description: Forbidden
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 11:34:58 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Forbidden
        '404':
          description: Not Found
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 11:35:21 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '27'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: false
                message: Object not found.
  /api/teacher/contests/programming:
    post:
      tags:
        - Teacher > Contests
      summary: Create programming Contest
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: name of contest
                time: 10
                description: description of contest
                level: beginner
                start_at: 2025-06-19 19:00
                problems:
                  - title: the average of numbers
                    description: |-
                      you are given n integer where 0< a[i] < 1e5
                       find the average of those numbers for t test case
                    time_limit: 1
                    memory_limit: 512
                    input: |-
                      2
                       5 1 2 3 4 5
                       3 5 5 5
                    output: 3 5
                    test_input: |-
                      4
                       5 1 2 3 4 5
                       3 5 5 5
                       4 1 1 2 2
                       1 5
                    expected_output: 3 5 1.5 5
                  - title: the sum of numbers
                    description: |-
                      you are given n integer where 0< a[i] < 1e5
                       find the sum of those numbers for t test case
                    time_limit: 1
                    memory_limit: 512
                    input: |-
                      2
                       5 1 2 3 4 5
                       3 5 5 5
                    output: 15 15
                    test_input: |-
                      4
                       5 1 2 3 4 5
                       3 5 5 5
                       4 1 1 2 2
                       1 5
                    expected_output: 15 15 6 5
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 11:37:50 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '27'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: Contest created successfully
        '422':
          description: Unprocessable Content
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 11:37:31 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '28'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  start_at:
                    - The start at field must be a date after now.
  /api/teacher/my_contests:
    get:
      tags:
        - Teacher > Contests
      summary: My created contests
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 11:37:15 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '29'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                contests:
                  - id: 19
                    name: name of contest
                    time: 10
                    description: description of contest
                    type: quiz
                    level: beginner
                    status: coming
                    start_at: '2025-09-30 19:00:00'
                    request_status: pending
                    students_count: 0
                    teacher_id: 29
  /api/teacher/contests/quiz:
    post:
      tags:
        - Teacher > Contests
      summary: Create quiz Contest
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: name of contest
                time: 10
                description: description of contest
                type: quiz
                level: beginner
                start_at: 2025-09-30 19:00
                questions:
                  - question: what is the sum of two and three
                    options:
                      - '5'
                      - '6'
                      - '7'
                  - question: what is cout
                    options:
                      - print
                      - do nothing
      security:
        - bearerAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '201':
          description: Created
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 11:36:48 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '25'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: Contest created successfully
        '422':
          description: Unprocessable Content
          headers:
            Host:
              schema:
                type: string
                example: 127.0.0.1:8000
            Connection:
              schema:
                type: string
                example: close
            X-Powered-By:
              schema:
                type: string
                example: PHP/8.2.12
            Cache-Control:
              schema:
                type: string
                example: no-cache, private
            Date:
              schema:
                type: string
                example: Tue, 01 Jul 2025 11:35:40 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '30'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '26'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Create quiz Contest
                  value:
                    errors:
                      start_at:
                        - The start at field must be a valid date.
                        - The start at field must match the format Y-m-d H:i.
                example-1:
                  summary: Create quiz Contest
                  value:
                    errors:
                      start_at:
                        - The start at field must be a date after now.
  /:
    get:
      tags:
        - New Folder
      summary: Testing training
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}

